[{"title":"hexo github配置博客","url":"/2022/04/06/hexo%20github%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/","content":"<h2 id=\"配置环境流程\"><a href=\"#配置环境流程\" class=\"headerlink\" title=\"配置环境流程\"></a>配置环境流程</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>官网下载node.js<br>node -v<br>nmp -v</p>\n<h3 id=\"创建blog目录\"><a href=\"#创建blog目录\" class=\"headerlink\" title=\"创建blog目录\"></a>创建blog目录</h3><p>mkdir /Users/jq/blog</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>nmp install hexo -g hexo-cli<br>hexo -v</p>\n<h3 id=\"VPN设置\"><a href=\"#VPN设置\" class=\"headerlink\" title=\"VPN设置\"></a>VPN设置</h3><p>如果设置了VPN，需要设置环境变量；<br>vim ./~zshrc</p>\n<p>export https_proxy=<a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> http_proxy=<a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> all_proxy=socks5://127.0.0.1:7890</p>\n<p>source ./~zshrc</p>\n<h3 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h3><p>sudo su<br>sudo hexo init</p>\n<h2 id=\"写一个博客流程\"><a href=\"#写一个博客流程\" class=\"headerlink\" title=\"写一个博客流程\"></a>写一个博客流程</h2><h3 id=\"开始hexo\"><a href=\"#开始hexo\" class=\"headerlink\" title=\"开始hexo\"></a>开始hexo</h3><p>hexo s</p>\n<h3 id=\"创建一个新博客\"><a href=\"#创建一个新博客\" class=\"headerlink\" title=\"创建一个新博客\"></a>创建一个新博客</h3><p>hexo n “XXXX”</p>\n<p>使用vsconde等编写内容。</p>\n<h3 id=\"清理\"><a href=\"#清理\" class=\"headerlink\" title=\"清理\"></a>清理</h3><p>hexo clean</p>\n<h3 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h3><p>hexo g</p>\n<h3 id=\"浏览刚才写的博客\"><a href=\"#浏览刚才写的博客\" class=\"headerlink\" title=\"浏览刚才写的博客\"></a>浏览刚才写的博客</h3><p>hexo s</p>\n<h2 id=\"配置github\"><a href=\"#配置github\" class=\"headerlink\" title=\"配置github\"></a>配置github</h2><h3 id=\"在最后添加\"><a href=\"#在最后添加\" class=\"headerlink\" title=\"在最后添加\"></a>在最后添加</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:jiaoqiang2014/jiaoqiang2014.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h2 id=\"换主题\"><a href=\"#换主题\" class=\"headerlink\" title=\"换主题\"></a>换主题</h2><h3 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia</span><br><span class=\"line\">git@github.com:yscoder/hexo-theme-indigo.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-config-yml配置\"><a href=\"#修改-config-yml配置\" class=\"headerlink\" title=\"修改_config.yml配置\"></a>修改_config.yml配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: yilia</span><br></pre></td></tr></table></figure>\n\n<p>Hexo clean</p>\n<p>Hexo g</p>\n<p>Hero s</p>\n<h3 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h3><p><strong><a href=\"https://tohugo.com/2021/01/26/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%EF%BC%88%E5%9C%A8Next%E4%B8%BB%E9%A2%98%E4%B8%8B%EF%BC%89/\">1、 hexo增加分类、标签</a></strong><br><strong><a href=\"https://www.fangdongdemao.com/2020/05/23/hexo-Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/\">2、 hexo主题美化</a></strong><br><strong><a href=\"https://github.com/Neveryu/Neveryu.github.io/blob/\">3 https://github.com/Neveryu/Neveryu.github.io/blob/</a></strong></p>\n","categories":["hexo"],"tags":["hexo"]},{"title":"杂项","url":"/2022/04/08/%E6%9D%82%E9%A1%B9/","content":"<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><h3 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h3><p>export 表示将该路径添加到环境变量中，打开 vim .zshrc ，添加jmeter的快速启动路径</p>\n<blockquote>\n<p>export JMETER_HOME=/usr/local/apache-jmeter-5.4.3<br>export PATH=$JAVA_HOME/bin:$PATH:.:$JMETER_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JMETER_HOME/lib/ext/ApacheJMeter_core.jar:$JMETER_HOME/lib/jorphan.jar:$JMETER_HOME/lib/logkit-2.0.jar</p>\n</blockquote>\n<p>source .zshrc 使.zshrc生效。<br>使用 export -p 可以查看当前的环境中的路径。</p>\n<h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><p>alias 为指定路径起别名。</p>\n<blockquote>\n<p>export PATH=/usr/local/mysql/bin:$PATH<br>#快速启动、结束MySQL服务, 可以使用alias命令<br>alias mysqlstart=’sudo /usr/local/mysql/support-files/mysql.server start’<br>alias mysqlstop=’sudo /usr/local/mysql/support-files/mysql.server stop’</p>\n</blockquote>\n<hr>\n<h2 id=\"macOS目录的作用\"><a href=\"#macOS目录的作用\" class=\"headerlink\" title=\"macOS目录的作用\"></a>macOS目录的作用</h2><h3 id=\"系统硬件相关\"><a href=\"#系统硬件相关\" class=\"headerlink\" title=\"系统硬件相关\"></a>系统硬件相关</h3><p>/cores 内核转储文件存放目录。当一个进程崩溃时，如果系统允许则会产生转储文件。<br>/dev 设备文件存放目录，如何代表硬盘的/dev/disk0。<br>/Network 网络节点存放目录；<br>/Volumes 文件系统挂载点存放目录。</p>\n<h3 id=\"系统配置相关\"><a href=\"#系统配置相关\" class=\"headerlink\" title=\"系统配置相关\"></a>系统配置相关</h3><p>/etc. 标准unix系统配置文件存放目录，如用户密码文件/etc/passwd。此目录实际为指向/private/etc的链接。</p>\n<h3 id=\"系统程序相关\"><a href=\"#系统程序相关\" class=\"headerlink\" title=\"系统程序相关\"></a>系统程序相关</h3><p>/Applications 应用程序目录，默认所有的GUI应用程序都安装在这里；<br>/Library 系统的数据文件、帮助文件、文档等等；<br>/System 只包含一个名为Library的目录，这个子目录中存放了系统的绝大部分组件，如各种framework，以及内核模块，字体文件等等。</p>\n<h3 id=\"系统命令相关\"><a href=\"#系统命令相关\" class=\"headerlink\" title=\"系统命令相关\"></a>系统命令相关</h3><p>/bin 传统unix命令的存放目录，如ls，rm，mv等。<br>/sbin 传统unix管理类命令存放目录，如fdisk，ifconfig等等。</p>\n<h3 id=\"用户信息相关\"><a href=\"#用户信息相关\" class=\"headerlink\" title=\"用户信息相关\"></a>用户信息相关</h3><p>/Users 存放用户的个人资料和配置。每个用户有自己的单独目录。</p>\n<h3 id=\"用户经常使用\"><a href=\"#用户经常使用\" class=\"headerlink\" title=\"用户经常使用\"></a>用户经常使用</h3><p>/usr 第三方程序安装目录。<br>/usr/bin, /usr/sbin, /usr/lib，其中/usr/lib目录中存放了共享库（动态链接库）。<br>/var 存放经常变化的文件，如日志文件。此目录实际为指向/private/var的链接。</p>\n<p>/opt/homebrew brew安装的程序一般放这儿。</p>\n<p>/private 里面的子目录存放了/tmp, /var, /etc等链接目录的目标目录。<br>/tmp 临时文件存放目录，其权限为所有人任意读写。此目录实际为指向/private/tmp的链接。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>/installer.failurerequests 可能是用来记录发生crash时的日志。</p>\n<hr>\n<h2 id=\"linux-命令拾遗\"><a href=\"#linux-命令拾遗\" class=\"headerlink\" title=\"linux 命令拾遗\"></a>linux 命令拾遗</h2><h3 id=\"lsof（list-open-files）\"><a href=\"#lsof（list-open-files）\" class=\"headerlink\" title=\"lsof（list open files）\"></a>lsof（list open files）</h3><p>lsof 列出当前系统打开文件的工具。lsof -i :8080 可以查看当前占用8080端口的进程。</p>\n<h3 id=\"ls（list）\"><a href=\"#ls（list）\" class=\"headerlink\" title=\"ls（list）\"></a>ls（list）</h3><p>ls默认情况下用来打印出当前目录的列表。</p>\n<hr>\n<h2 id=\"git流程\"><a href=\"#git流程\" class=\"headerlink\" title=\"git流程\"></a>git流程</h2><p>将写了一半的项目git到空github上。</p>\n<ol>\n<li>github上创建同名仓库</li>\n<li>git clone到本地</li>\n<li>将隐藏的.git文件复制到已经写了一半的project中</li>\n<li>git add .</li>\n<li>git status</li>\n<li>git commit -m “提交说明”</li>\n<li>git push</li>\n</ol>\n<hr>\n","tags":["杂项"]},{"title":"SpringBoot自定义参数解析器","url":"/2022/04/15/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8/","content":"<h2 id=\"1、实现参数解析器的接口HandlerMethodArgumentResolver\"><a href=\"#1、实现参数解析器的接口HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"1、实现参数解析器的接口HandlerMethodArgumentResolver\"></a>1、实现参数解析器的接口<code>HandlerMethodArgumentResolver</code></h2><p><code>HandlerMethodArgumentResolver</code>接口包含两个方法<code>supportsParameter</code>和<code>resolveArgument</code>。</p>\n<ul>\n<li>supportsParameter方法返回 boolean 值，表示是否启用该解析器，true 表示启用，false 表示不启用；</li>\n<li>resolveArgument 方法表示方法参数的解析过程，就是你把 HTTP 的请求参数转换为方法参数的过程，返回 Object 对象，即参数的转换结果。</li>\n</ul>\n<p>源代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HandlerMethodArgumentResolver</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter var1)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter var1, ModelAndViewContainer var2, NativeWebRequest var3, WebDataBinderFactory var4)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、自定义一个参数解析器\"><a href=\"#2、自定义一个参数解析器\" class=\"headerlink\" title=\"2、自定义一个参数解析器\"></a>2、自定义一个参数解析器</h2><ul>\n<li>定义一个方法注解</li>\n<li>实现<code>HandlerMethodArgumentResolver</code>接口。</li>\n<li>注册参数解析器</li>\n<li>使用参数解析器<h3 id=\"2-1-定义一个方法注解\"><a href=\"#2-1-定义一个方法注解\" class=\"headerlink\" title=\"2.1 定义一个方法注解\"></a>2.1 定义一个方法注解</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(METHOD)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ParamModel &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以定义需要带的参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-2-实现HandlerMethodArgumentResolver接口。\"><a href=\"#2-2-实现HandlerMethodArgumentResolver接口。\" class=\"headerlink\" title=\"2.2 实现HandlerMethodArgumentResolver接口。\"></a>2.2 实现<code>HandlerMethodArgumentResolver</code>接口。</h3><p>在<code>HandlerMethodArgumentResolver</code>接口中实现具体的参数解析。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserArgumentResolvers</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerMethodArgumentResolver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//带有注解就解析，即调用下面的 resolveArgument 方法。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> methodParameter.hasParameterAnnotation(ParamModel.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer,</span></span><br><span class=\"line\"><span class=\"params\">                                  NativeWebRequest webRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">       <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">       <span class=\"type\">HttpServletResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从request和request中解析出对应的Object。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-注册参数解析器\"><a href=\"#2-3-注册参数解析器\" class=\"headerlink\" title=\"2.3 注册参数解析器\"></a>2.3 注册参数解析器</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserArgumentResolvers userArgumentResolver;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addArgumentResolvers</span><span class=\"params\">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class=\"line\">        argumentResolvers.add(userArgumentResolver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-使用参数解析器\"><a href=\"#2-4-使用参数解析器\" class=\"headerlink\" title=\"2.4 使用参数解析器\"></a>2.4 使用参数解析器</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getMiaoshaPath</span><span class=\"params\">(<span class=\"meta\">@ParamModel</span> <span class=\"type\">int</span> verifyCode)</span> &#123; <span class=\"comment\">// 参数解析的结果会赋值给verifyCode。</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["SpringBoot"],"tags":["java、SpringBoot、参数解析器"]},{"title":"SpringBoot实现拦截器","url":"/2022/04/15/SpringBoot%E5%AE%9E%E7%8E%B0%E6%8B%A6%E6%88%AA%E5%99%A8/","content":"<h2 id=\"1、功能需求，在秒杀商品时，需要使用秒杀接口防刷保护程序，可以定义一个拦截器实现。具体使用如下所示：\"><a href=\"#1、功能需求，在秒杀商品时，需要使用秒杀接口防刷保护程序，可以定义一个拦截器实现。具体使用如下所示：\" class=\"headerlink\" title=\"1、功能需求，在秒杀商品时，需要使用秒杀接口防刷保护程序，可以定义一个拦截器实现。具体使用如下所示：\"></a>1、功能需求，在秒杀商品时，需要使用秒杀接口防刷保护程序，可以定义一个拦截器实现。具体使用如下所示：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AccessLimit(seconds = 1, maxCount = 100, needLogin = true)</span></span><br></pre></td></tr></table></figure>\n<p>这个拦截器需要当前用户登录，且1s内限制最大请求次数为100。<br>拦截器的实现是基于参数解析器的，关于参数解析器的部分参考博客参数解析器的说明。</p>\n<h2 id=\"2、拦截器的主要类HandlerInterceptorAdapter\"><a href=\"#2、拦截器的主要类HandlerInterceptorAdapter\" class=\"headerlink\" title=\"2、拦截器的主要类HandlerInterceptorAdapter\"></a>2、拦截器的主要类<code>HandlerInterceptorAdapter</code></h2><p><code>HandlerInterceptorAdapter</code>提供的方法如下：</p>\n<ul>\n<li><code>preHandle</code>:方法执行前调用拦截器，返回true，则接续执行，否则不会执行方法。</li>\n<li><code>postHandle</code>:在方法执行后调用。</li>\n<li><code>afterCompletion</code><br>源代码如下：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、实现拦截器\"><a href=\"#2、实现拦截器\" class=\"headerlink\" title=\"2、实现拦截器\"></a>2、实现拦截器</h2><ul>\n<li>自定义 @AccessLimit 参数解析器。</li>\n<li>重写<code>HandlerInterceptorAdapter</code>类的<code>preHandle</code>方法</li>\n<li>注册拦截器</li>\n<li>使用拦截器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1-自定义-AccessLimit-参数解析器。\"><a href=\"#2-1-自定义-AccessLimit-参数解析器。\" class=\"headerlink\" title=\"2.1 自定义 @AccessLimit 参数解析器。\"></a>2.1 自定义 @AccessLimit 参数解析器。</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 定义一个注解</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(METHOD)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AccessLimit &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">seconds</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxCount</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">needLogin</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 实现参数解析</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserArgumentResolvers</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerMethodArgumentResolver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MiaoshaUserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer,</span></span><br><span class=\"line\"><span class=\"params\">                                  NativeWebRequest webRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 注册参数解析器</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserArgumentResolvers userArgumentResolver;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addArgumentResolvers</span><span class=\"params\">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class=\"line\">        argumentResolvers.add(userArgumentResolver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-重写preHandle方法\"><a href=\"#2-2-重写preHandle方法\" class=\"headerlink\" title=\"2.2 重写preHandle方法\"></a>2.2 重写<code>preHandle</code>方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*  满足拦截条件 return false;</span></span><br><span class=\"line\"><span class=\"comment\">*  不满足拦截条件 return true;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AccessInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HandlerInterceptorAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handler <span class=\"keyword\">instanceof</span> HandlerMethod)&#123;</span><br><span class=\"line\">            <span class=\"type\">MiaoshaUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> getUser(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 存储user</span></span><br><span class=\"line\">            UserContext.setUser(user); <span class=\"comment\">// 当前线程就可以取用。</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">HandlerMethod</span> <span class=\"variable\">hm</span> <span class=\"operator\">=</span> (HandlerMethod) handler;</span><br><span class=\"line\">            <span class=\"type\">AccessLimit</span> <span class=\"variable\">accessLimit</span> <span class=\"operator\">=</span> hm.getMethodAnnotation(AccessLimit.class);    <span class=\"comment\">// 获取注解</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (accessLimit == <span class=\"literal\">null</span>) &#123;    <span class=\"comment\">// 如果没有限制</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">seconds</span> <span class=\"operator\">=</span> accessLimit.seconds();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">maxCount</span> <span class=\"operator\">=</span> accessLimit.maxCount();</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">needLogin</span> <span class=\"operator\">=</span> accessLimit.needLogin();</span><br><span class=\"line\">            <span class=\"comment\">// 具体的拦截逻辑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-注册拦截器\"><a href=\"#2-3-注册拦截器\" class=\"headerlink\" title=\"2.3 注册拦截器\"></a>2.3 注册拦截器</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurerAdapter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AccessInterceptor accessInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addArgumentResolvers</span><span class=\"params\">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class=\"line\">        argumentResolvers.add(userArgumentResolver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册拦截器</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-使用拦截器\"><a href=\"#2-4-使用拦截器\" class=\"headerlink\" title=\"2.4 使用拦截器\"></a>2.4 使用拦截器</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AccessLimit(seconds = 1, maxCount = 100, needLogin = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["SpringBoot"],"tags":["java，SpringBoot，拦截器"]},{"title":"java杂项","url":"/2022/04/15/java%E6%9D%82%E9%A1%B9/","content":"<h2 id=\"ThreadLcoal-的用法\"><a href=\"#ThreadLcoal-的用法\" class=\"headerlink\" title=\"ThreadLcoal 的用法\"></a>ThreadLcoal 的用法</h2><p>在秒杀功能中，使用<code>ThreadLcoal</code>存储<code>MiaoshaUser</code>，用户点击秒杀按钮时需要对判断用户是不是秒杀用户，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.imooc.miaosha.access;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.imooc.miaosha.domain.MiaoshaUser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserContext</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;MiaoshaUser&gt; userHolder = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUser</span><span class=\"params\">(MiaoshaUser user)</span>&#123;</span><br><span class=\"line\">        userHolder.set(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MiaoshaUser <span class=\"title function_\">getUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userHolder.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["java"],"tags":["杂项"]}]