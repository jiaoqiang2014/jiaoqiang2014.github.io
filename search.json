[{"title":"SpringMVC自定义参数解析器","url":"/2022/04/15/SpringMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8/","content":"<h1 id=\"1、实现参数解析器的接口HandlerMethodArgumentResolver\"><a href=\"#1、实现参数解析器的接口HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"1、实现参数解析器的接口HandlerMethodArgumentResolver\"></a>1、实现参数解析器的接口<code>HandlerMethodArgumentResolver</code></h1><p><code>HandlerMethodArgumentResolver</code>接口包含两个方法<code>supportsParameter</code>和<code>resolveArgument</code>。</p>\n<ul>\n<li>supportsParameter方法返回 boolean 值，表示是否启用该解析器，true 表示启用，false 表示不启用；</li>\n<li>resolveArgument 方法表示方法参数的解析过程，就是你把 HTTP 的请求参数转换为方法参数的过程，返回 Object 对象，即参数的转换结果。</li>\n</ul>\n<p>源代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HandlerMethodArgumentResolver</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter var1)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter var1, ModelAndViewContainer var2, NativeWebRequest var3, WebDataBinderFactory var4)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2、自定义一个参数解析器\"><a href=\"#2、自定义一个参数解析器\" class=\"headerlink\" title=\"2、自定义一个参数解析器\"></a>2、自定义一个参数解析器</h1><ul>\n<li>定义一个方法注解</li>\n<li>实现<code>HandlerMethodArgumentResolver</code>接口。</li>\n<li>注册参数解析器</li>\n<li>使用参数解析器</li>\n</ul>\n<h2 id=\"2-1-定义一个方法注解\"><a href=\"#2-1-定义一个方法注解\" class=\"headerlink\" title=\"2.1 定义一个方法注解\"></a>2.1 定义一个方法注解</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(METHOD)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ParamModel &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以定义需要带的参数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-实现HandlerMethodArgumentResolver接口。\"><a href=\"#2-2-实现HandlerMethodArgumentResolver接口。\" class=\"headerlink\" title=\"2.2 实现HandlerMethodArgumentResolver接口。\"></a>2.2 实现<code>HandlerMethodArgumentResolver</code>接口。</h2><p>在<code>HandlerMethodArgumentResolver</code>接口中实现具体的参数解析。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserArgumentResolvers</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerMethodArgumentResolver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//带有注解就解析，即调用下面的 resolveArgument 方法。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> methodParameter.hasParameterAnnotation(ParamModel.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer,</span></span><br><span class=\"line\"><span class=\"params\">                                  NativeWebRequest webRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">       <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">       <span class=\"type\">HttpServletResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从request和request中解析出对应的Object。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-注册参数解析器\"><a href=\"#2-3-注册参数解析器\" class=\"headerlink\" title=\"2.3 注册参数解析器\"></a>2.3 注册参数解析器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserArgumentResolvers userArgumentResolver;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addArgumentResolvers</span><span class=\"params\">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class=\"line\">        argumentResolvers.add(userArgumentResolver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-使用参数解析器\"><a href=\"#2-4-使用参数解析器\" class=\"headerlink\" title=\"2.4 使用参数解析器\"></a>2.4 使用参数解析器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getMiaoshaPath</span><span class=\"params\">(<span class=\"meta\">@ParamModel</span> <span class=\"type\">int</span> verifyCode)</span> &#123; <span class=\"comment\">// 参数解析的结果会赋值给verifyCode。</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["SpringMVC"],"tags":["java、SpringMVC、参数解析器"]},{"title":"SpringMVC实现拦截器","url":"/2022/04/15/SpringMVC%E5%AE%9E%E7%8E%B0%E6%8B%A6%E6%88%AA%E5%99%A8/","content":"<h1 id=\"1、功能需求\"><a href=\"#1、功能需求\" class=\"headerlink\" title=\"1、功能需求\"></a>1、功能需求</h1><p>在秒杀商品时，需要使用秒杀接口防刷保护程序，可以定义一个拦截器实现。具体使用如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AccessLimit(seconds = 1, maxCount = 100, needLogin = true)</span></span><br></pre></td></tr></table></figure>\n<p>这个拦截器需要当前用户登录，且1s内限制最大请求次数为100。</p>\n<h1 id=\"2、拦截器的主要类HandlerInterceptorAdapter\"><a href=\"#2、拦截器的主要类HandlerInterceptorAdapter\" class=\"headerlink\" title=\"2、拦截器的主要类HandlerInterceptorAdapter\"></a>2、拦截器的主要类<code>HandlerInterceptorAdapter</code></h1><p><code>HandlerInterceptorAdapter</code>提供的方法如下：</p>\n<ul>\n<li><code>preHandle</code>:方法执行前调用拦截器，返回true，则接续执行，否则不会执行方法。</li>\n<li><code>postHandle</code>:在方法执行后调用。</li>\n<li><code>afterCompletion</code><br>源代码如下：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"3、实现拦截器\"><a href=\"#3、实现拦截器\" class=\"headerlink\" title=\"3、实现拦截器\"></a>3、实现拦截器</h1><ul>\n<li>自定义 @AccessLimit 参数解析器。</li>\n<li>重写<code>HandlerInterceptorAdapter</code>类的<code>preHandle</code>方法</li>\n<li>注册拦截器</li>\n<li>使用拦截器</li>\n</ul>\n<h2 id=\"3-1-自定义-AccessLimit-注解。\"><a href=\"#3-1-自定义-AccessLimit-注解。\" class=\"headerlink\" title=\"3.1 自定义 @AccessLimit 注解。\"></a>3.1 自定义 @AccessLimit 注解。</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 定义一个注解</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(METHOD)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AccessLimit &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">seconds</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxCount</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">needLogin</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-重写preHandle方法\"><a href=\"#3-2-重写preHandle方法\" class=\"headerlink\" title=\"3.2 重写preHandle方法\"></a>3.2 重写<code>preHandle</code>方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*  满足拦截条件 return false;</span></span><br><span class=\"line\"><span class=\"comment\">*  不满足拦截条件 return true;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AccessInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HandlerInterceptorAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handler <span class=\"keyword\">instanceof</span> HandlerMethod)&#123;</span><br><span class=\"line\">            <span class=\"type\">MiaoshaUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> getUser(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 存储user</span></span><br><span class=\"line\">            UserContext.setUser(user); <span class=\"comment\">// 当前线程就可以取用。</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">HandlerMethod</span> <span class=\"variable\">hm</span> <span class=\"operator\">=</span> (HandlerMethod) handler;</span><br><span class=\"line\">            <span class=\"type\">AccessLimit</span> <span class=\"variable\">accessLimit</span> <span class=\"operator\">=</span> hm.getMethodAnnotation(AccessLimit.class);    <span class=\"comment\">// 获取注解</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (accessLimit == <span class=\"literal\">null</span>) &#123;    <span class=\"comment\">// 如果没有限制</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">seconds</span> <span class=\"operator\">=</span> accessLimit.seconds();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">maxCount</span> <span class=\"operator\">=</span> accessLimit.maxCount();</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">needLogin</span> <span class=\"operator\">=</span> accessLimit.needLogin();</span><br><span class=\"line\">            <span class=\"comment\">// 具体的拦截逻辑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-注册拦截器\"><a href=\"#3-3-注册拦截器\" class=\"headerlink\" title=\"3.3 注册拦截器\"></a>3.3 注册拦截器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurerAdapter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AccessInterceptor accessInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addArgumentResolvers</span><span class=\"params\">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class=\"line\">        argumentResolvers.add(userArgumentResolver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册拦截器</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-使用拦截器\"><a href=\"#3-4-使用拦截器\" class=\"headerlink\" title=\"3.4 使用拦截器\"></a>3.4 使用拦截器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AccessLimit(seconds = 1, maxCount = 100, needLogin = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["SpringMVC"],"tags":["java，SpringMVC，拦截器"]},{"title":"java杂项","url":"/2022/04/15/java%E6%9D%82%E9%A1%B9/","content":"<h2 id=\"ThreadLcoal-的用法\"><a href=\"#ThreadLcoal-的用法\" class=\"headerlink\" title=\"ThreadLcoal 的用法\"></a>ThreadLcoal 的用法</h2><p>在秒杀功能中，定义一个<code>static</code>的<code>ThreadLcoal</code>存储<code>MiaoshaUser</code>。当用户点击秒杀按钮时将其存储在<code>ThreadLocal</code>中，该线程以后使用时就可以直接get。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;MiaoshaUser&gt; userHolder = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>如果不这样做，需要每次从请求中解析<code>MiaoshaUser</code>对象,代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserArgumentResolvers</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerMethodArgumentResolver</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MiaoshaUserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当为 MiaoshaUser 类型时就执行参数解析，即调用下面的 resolveArgument 方法。</span></span><br><span class=\"line\">        Class&lt;?&gt; clazz = parameter.getParameterType();</span><br><span class=\"line\">        <span class=\"type\">return</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span>= MiaoshaUser.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer,</span></span><br><span class=\"line\"><span class=\"params\">                                  NativeWebRequest webRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">       <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">       <span class=\"type\">HttpServletResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">paramToken</span> <span class=\"operator\">=</span> request.getParameter(MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">cookieToken</span> <span class=\"operator\">=</span> getCookieValue(request, MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (StringUtils.isEmpty(cookieToken) &amp;&amp; StringUtils.isEmpty(paramToken))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> StringUtils.isEmpty(paramToken) ? cookieToken : paramToken;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> userService.getByToken(response,token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> String <span class=\"title function_\">getCookieValue</span><span class=\"params\">(HttpServletRequest request, String cookieName)</span> &#123;</span><br><span class=\"line\">       Cookie[] cookies = request.getCookies();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (cookies == <span class=\"literal\">null</span> || cookies.length &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Cookie cookie : cookies) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (cookie.getName().equals(cookieName))&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> cookie.getValue();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["java"],"tags":["杂项"]},{"title":"初识ThreadLocal","url":"/2022/04/16/%E5%88%9D%E8%AF%86ThreadLocal/","content":"<h1 id=\"1、ThreadLocal-使用实例\"><a href=\"#1、ThreadLocal-使用实例\" class=\"headerlink\" title=\"1、ThreadLocal 使用实例\"></a>1、ThreadLocal 使用实例</h1><p>来源：<a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744/1306581251653666\">廖雪峰Java教程</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">es</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\">        String[] users = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[] &#123; <span class=\"string\">&quot;Bob&quot;</span>, <span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;Tim&quot;</span>, <span class=\"string\">&quot;Mike&quot;</span>, <span class=\"string\">&quot;Lily&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;Bush&quot;</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String user : users) &#123;</span><br><span class=\"line\">            es.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(user));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        es.awaitTermination(<span class=\"number\">3</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        es.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserContext</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AutoCloseable</span> &#123;    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;String&gt; userThreadLocal = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserContext</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        userThreadLocal.set(name);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;[%s] init user %s...\\n&quot;</span>, Thread.currentThread().getName(), UserContext.getCurrentUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getCurrentUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userThreadLocal.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;[%s] cleanup for user %s...\\n&quot;</span>, Thread.currentThread().getName(),</span><br><span class=\"line\">                UserContext.getCurrentUser());</span><br><span class=\"line\">        userThreadLocal.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Task</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Task</span><span class=\"params\">(String username)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">UserContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserContext</span>(<span class=\"built_in\">this</span>.username)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Task1</span>().process();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Task2</span>().process();</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Task3</span>().process();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Task1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;[%s] check user %s...\\n&quot;</span>, Thread.currentThread().getName(), UserContext.getCurrentUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Task2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;[%s] %s registered ok.\\n&quot;</span>, Thread.currentThread().getName(), UserContext.getCurrentUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Task3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException ignored) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;[%s] work of %s has done.\\n&quot;</span>, Thread.currentThread().getName(),</span><br><span class=\"line\">                UserContext.getCurrentUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2、ThreadLocal-结构\"><a href=\"#2、ThreadLocal-结构\" class=\"headerlink\" title=\"2、ThreadLocal 结构\"></a>2、ThreadLocal 结构</h1><p><code>ThreadLocal</code>类里边定义了一个<code>ThreadLocalMap</code>静态内部类，<code>ThreadLocalMap</code>里边又有一个<code>static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>{}。除此之外，<code>ThreadLocalMap</code>中定义了<code>private Entry[] table。</code>因此，<code>ThreadLocal</code>的结构如下：<br><img src=\"/2022/04/16/%E5%88%9D%E8%AF%86ThreadLocal/ThreadLocal.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> ThreadLocalMap <span class=\"title function_\">createInheritedMap</span><span class=\"params\">(ThreadLocalMap parentMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocalMap</span>(parentMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocalMap</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** The value associated with this ThreadLocal. */</span></span><br><span class=\"line\">            Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">super</span>(k);</span><br><span class=\"line\">                value = v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The initial capacity -- MUST be a power of two.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">INITIAL_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The table, resized as necessary.</span></span><br><span class=\"line\"><span class=\"comment\">         * table.length MUST always be a power of two.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Entry[] table;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The number of entries in the table.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * The next size value at which to resize.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> threshold; <span class=\"comment\">// Default to 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class=\"line\">            table = <span class=\"keyword\">new</span> <span class=\"title class_\">Entry</span>[INITIAL_CAPACITY];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class=\"number\">1</span>);</span><br><span class=\"line\">            table[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Entry</span>(firstKey, firstValue);</span><br><span class=\"line\">            size = <span class=\"number\">1</span>;</span><br><span class=\"line\">            setThreshold(INITIAL_CAPACITY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内存泄露问题\"><a href=\"#内存泄露问题\" class=\"headerlink\" title=\"内存泄露问题\"></a>内存泄露问题</h3><p><code>ThreadLocalMap</code>中的key是一个弱引用，垃圾回收时就会被回收。如果<code>ThreadLocalMap</code>对应的线程依旧存活，那么value就依旧具有强引用而不会被回收，从而导致内存泄漏。解决内存泄漏的方法：直接调用remove()方法 (try{}finally{})，将value也置为 NULL。</p>\n<h1 id=\"3、结合Thread理解ThreadLoal\"><a href=\"#3、结合Thread理解ThreadLoal\" class=\"headerlink\" title=\"3、结合Thread理解ThreadLoal\"></a>3、结合<code>Thread</code>理解<code>ThreadLoal</code></h1><p><code>Thread</code>类中包含一个<code>ThreadLocal.ThreadLocalMap</code>类型的成员变量<code>threadLocals</code>，因此每一个<code>Thread</code>都有一个<code>ThreadLocalMap</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class=\"line\"><span class=\"comment\">     * by the ThreadLocal class. */</span></span><br><span class=\"line\">    ThreadLocal.<span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">threadLocals</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ThreadLoal</code>set或get时，会先获取当前的<code>thread</code>，其实操作的就是<code>thread</code>的<code>threadLocals</code>,代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> map.getEntry(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (T)e.value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> setInitialValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            map.set(<span class=\"built_in\">this</span>, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            createMap(t, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ThreadLocalMap <span class=\"title function_\">getMap</span><span class=\"params\">(Thread t)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t.threadLocals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在set方法中，最终是<code>map.set(this, value)</code>，这儿的this是Thread的一个实例,因此map结构是 (线程 –&gt; Object)。</p>\n<h2 id=\"思考：Entry类数组的作用？\"><a href=\"#思考：Entry类数组的作用？\" class=\"headerlink\" title=\"思考：Entry类数组的作用？\"></a>思考：<code>Entry</code>类数组的作用？</h2><h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p>1、<a href=\"https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/concurrent/threadlocal.md\">Guide ThreadLocal 关键字解析</a></p>\n","categories":["java"]},{"title":"杂项","url":"/2022/04/08/%E6%9D%82%E9%A1%B9/","content":"<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><h3 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h3><p>export 表示将该路径添加到环境变量中，打开 vim .zshrc ，添加jmeter的快速启动路径</p>\n<blockquote>\n<p>export JMETER_HOME=/usr/local/apache-jmeter-5.4.3<br>export PATH=$JAVA_HOME/bin:$PATH:.:$JMETER_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JMETER_HOME/lib/ext/ApacheJMeter_core.jar:$JMETER_HOME/lib/jorphan.jar:$JMETER_HOME/lib/logkit-2.0.jar</p>\n</blockquote>\n<p>source .zshrc 使.zshrc生效。<br>使用 export -p 可以查看当前的环境中的路径。</p>\n<h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><p>alias 为指定路径起别名。</p>\n<blockquote>\n<p>export PATH=/usr/local/mysql/bin:$PATH<br>#快速启动、结束MySQL服务, 可以使用alias命令<br>alias mysqlstart=’sudo /usr/local/mysql/support-files/mysql.server start’<br>alias mysqlstop=’sudo /usr/local/mysql/support-files/mysql.server stop’</p>\n</blockquote>\n<hr>\n<h2 id=\"macOS目录的作用\"><a href=\"#macOS目录的作用\" class=\"headerlink\" title=\"macOS目录的作用\"></a>macOS目录的作用</h2><h3 id=\"系统硬件相关\"><a href=\"#系统硬件相关\" class=\"headerlink\" title=\"系统硬件相关\"></a>系统硬件相关</h3><p>/cores 内核转储文件存放目录。当一个进程崩溃时，如果系统允许则会产生转储文件。<br>/dev 设备文件存放目录，如何代表硬盘的/dev/disk0。<br>/Network 网络节点存放目录；<br>/Volumes 文件系统挂载点存放目录。</p>\n<h3 id=\"系统配置相关\"><a href=\"#系统配置相关\" class=\"headerlink\" title=\"系统配置相关\"></a>系统配置相关</h3><p>/etc. 标准unix系统配置文件存放目录，如用户密码文件/etc/passwd。此目录实际为指向/private/etc的链接。</p>\n<h3 id=\"系统程序相关\"><a href=\"#系统程序相关\" class=\"headerlink\" title=\"系统程序相关\"></a>系统程序相关</h3><p>/Applications 应用程序目录，默认所有的GUI应用程序都安装在这里；<br>/Library 系统的数据文件、帮助文件、文档等等；<br>/System 只包含一个名为Library的目录，这个子目录中存放了系统的绝大部分组件，如各种framework，以及内核模块，字体文件等等。</p>\n<h3 id=\"系统命令相关\"><a href=\"#系统命令相关\" class=\"headerlink\" title=\"系统命令相关\"></a>系统命令相关</h3><p>/bin 传统unix命令的存放目录，如ls，rm，mv等。<br>/sbin 传统unix管理类命令存放目录，如fdisk，ifconfig等等。</p>\n<h3 id=\"用户信息相关\"><a href=\"#用户信息相关\" class=\"headerlink\" title=\"用户信息相关\"></a>用户信息相关</h3><p>/Users 存放用户的个人资料和配置。每个用户有自己的单独目录。</p>\n<h3 id=\"用户经常使用\"><a href=\"#用户经常使用\" class=\"headerlink\" title=\"用户经常使用\"></a>用户经常使用</h3><p>/usr 第三方程序安装目录。<br>/usr/bin, /usr/sbin, /usr/lib，其中/usr/lib目录中存放了共享库（动态链接库）。<br>/var 存放经常变化的文件，如日志文件。此目录实际为指向/private/var的链接。</p>\n<p>/opt/homebrew brew安装的程序一般放这儿。</p>\n<p>/private 里面的子目录存放了/tmp, /var, /etc等链接目录的目标目录。<br>/tmp 临时文件存放目录，其权限为所有人任意读写。此目录实际为指向/private/tmp的链接。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>/installer.failurerequests 可能是用来记录发生crash时的日志。</p>\n<hr>\n<h2 id=\"linux-命令拾遗\"><a href=\"#linux-命令拾遗\" class=\"headerlink\" title=\"linux 命令拾遗\"></a>linux 命令拾遗</h2><h3 id=\"lsof（list-open-files）\"><a href=\"#lsof（list-open-files）\" class=\"headerlink\" title=\"lsof（list open files）\"></a>lsof（list open files）</h3><p>lsof 列出当前系统打开文件的工具。lsof -i :8080 可以查看当前占用8080端口的进程。</p>\n<h3 id=\"ls（list）\"><a href=\"#ls（list）\" class=\"headerlink\" title=\"ls（list）\"></a>ls（list）</h3><p>ls默认情况下用来打印出当前目录的列表。</p>\n<hr>\n<h2 id=\"git流程\"><a href=\"#git流程\" class=\"headerlink\" title=\"git流程\"></a>git流程</h2><p>将写了一半的项目git到空github上。</p>\n<ol>\n<li>github上创建同名仓库</li>\n<li>git clone到本地</li>\n<li>将隐藏的.git文件复制到已经写了一半的project中</li>\n<li>git add .</li>\n<li>git status</li>\n<li>git commit -m “提交说明”</li>\n<li>git push</li>\n</ol>\n<hr>\n","tags":["杂项"]},{"title":"hexo github配置博客","url":"/2022/04/06/hexo%20github%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/","content":"<h2 id=\"1、-配置环境流程\"><a href=\"#1、-配置环境流程\" class=\"headerlink\" title=\"1、 配置环境流程\"></a>1、 配置环境流程</h2><h3 id=\"1-1-安装node-js\"><a href=\"#1-1-安装node-js\" class=\"headerlink\" title=\"1.1 安装node.js\"></a>1.1 安装node.js</h3><p>官网下载node.js<br>node -v<br>nmp -v</p>\n<h3 id=\"1-2-创建blog目录\"><a href=\"#1-2-创建blog目录\" class=\"headerlink\" title=\"1.2 创建blog目录\"></a>1.2 创建blog目录</h3><p>mkdir /Users/jq/blog</p>\n<h3 id=\"1-3-安装hexo\"><a href=\"#1-3-安装hexo\" class=\"headerlink\" title=\"1.3 安装hexo\"></a>1.3 安装hexo</h3><p>nmp install hexo -g hexo-cli<br>hexo -v</p>\n<h3 id=\"1-4-VPN设置\"><a href=\"#1-4-VPN设置\" class=\"headerlink\" title=\"1.4 VPN设置\"></a>1.4 VPN设置</h3><p>如果设置了VPN，需要设置环境变量；<br>vim ./~zshrc</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br><span class=\"line\"></span><br><span class=\"line\">source ./~zshrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-初始化hexo\"><a href=\"#1-5-初始化hexo\" class=\"headerlink\" title=\"1.5 初始化hexo\"></a>1.5 初始化hexo</h3><p>sudo su<br>sudo hexo init</p>\n<h2 id=\"2、写一个博客流程\"><a href=\"#2、写一个博客流程\" class=\"headerlink\" title=\"2、写一个博客流程\"></a>2、写一个博客流程</h2><h3 id=\"2-1-开始hexo\"><a href=\"#2-1-开始hexo\" class=\"headerlink\" title=\"2.1 开始hexo\"></a>2.1 开始hexo</h3><p>hexo s</p>\n<h3 id=\"2-2-创建一个新博客\"><a href=\"#2-2-创建一个新博客\" class=\"headerlink\" title=\"2.2 创建一个新博客\"></a>2.2 创建一个新博客</h3><p>hexo n “XXXX”</p>\n<p>使用vsconde等编写内容。</p>\n<h3 id=\"2-3-清理\"><a href=\"#2-3-清理\" class=\"headerlink\" title=\"2.3 清理\"></a>2.3 清理</h3><p>hexo clean</p>\n<h3 id=\"2-4-生成博客\"><a href=\"#2-4-生成博客\" class=\"headerlink\" title=\"2.4 生成博客\"></a>2.4 生成博客</h3><p>hexo g</p>\n<h3 id=\"2-5-浏览刚才写的博客\"><a href=\"#2-5-浏览刚才写的博客\" class=\"headerlink\" title=\"2.5 浏览刚才写的博客\"></a>2.5 浏览刚才写的博客</h3><p>hexo s</p>\n<h2 id=\"3、配置github\"><a href=\"#3、配置github\" class=\"headerlink\" title=\"3、配置github\"></a>3、配置github</h2><h3 id=\"3-1-在最后添加\"><a href=\"#3-1-在最后添加\" class=\"headerlink\" title=\"3.1 在最后添加\"></a>3.1 在最后添加</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:jiaoqiang2014/jiaoqiang2014.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、换主题\"><a href=\"#4、换主题\" class=\"headerlink\" title=\"4、换主题\"></a>4、换主题</h2><h3 id=\"4-1-下载主题\"><a href=\"#4-1-下载主题\" class=\"headerlink\" title=\"4.1 下载主题\"></a>4.1 下载主题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia</span><br><span class=\"line\">git@github.com:yscoder/hexo-theme-indigo.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-修改-config-yml配置\"><a href=\"#4-2-修改-config-yml配置\" class=\"headerlink\" title=\"4.2 修改_config.yml配置\"></a>4.2 修改_config.yml配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: yilia</span><br></pre></td></tr></table></figure>\n\n<p>Hexo clean</p>\n<p>Hexo g</p>\n<p>Hero s</p>\n<h2 id=\"5、代码折叠功能\"><a href=\"#5、代码折叠功能\" class=\"headerlink\" title=\"5、代码折叠功能\"></a>5、<a href=\"https://www.toimc.com/hexo-usage-2/#%E6%B7%BB%E5%8A%A0jquery\">代码折叠功能</a></h2><h2 id=\"6、hexo引用本地图片无法显示问题\"><a href=\"#6、hexo引用本地图片无法显示问题\" class=\"headerlink\" title=\"6、hexo引用本地图片无法显示问题\"></a>6、<a href=\"https://juejin.cn/post/7006594302604214280\">hexo引用本地图片无法显示问题</a></h2><p>使用格式为：<code>![图片描述](md文件夹名字/example.jpg)</code></p>\n<h3 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h3><p><strong><a href=\"https://tohugo.com/2021/01/26/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%EF%BC%88%E5%9C%A8Next%E4%B8%BB%E9%A2%98%E4%B8%8B%EF%BC%89/\">1、 hexo增加分类、标签</a></strong><br><strong><a href=\"https://www.fangdongdemao.com/2020/05/23/hexo-Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/\">2、 hexo主题美化</a></strong><br><strong><a href=\"https://github.com/Neveryu/Neveryu.github.io/blob/\">3 https://github.com/Neveryu/Neveryu.github.io/blob/</a></strong></p>\n","categories":["hexo"],"tags":["hexo"]},{"title":"开发环境安装杂项","url":"/2022/04/18/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E6%9D%82%E9%A1%B9/","content":"<h2 id=\"1、配置git\"><a href=\"#1、配置git\" class=\"headerlink\" title=\"1、配置git\"></a>1、配置git</h2><ul>\n<li>生成ssh</li>\n<li>配置到github</li>\n<li>测试</li>\n</ul>\n<h3 id=\"生成ssh\"><a href=\"#生成ssh\" class=\"headerlink\" title=\"生成ssh\"></a>生成ssh</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;jiaoqiang2014@163.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置到github\"><a href=\"#配置到github\" class=\"headerlink\" title=\"配置到github\"></a>配置到github</h3><p>在<code>~/.ssh</code>目录下生成<code>id_rsa.pub</code>和<code>id_rsa</code>公钥和私钥。打开公钥，复制到github</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /Users/jq/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>如果显示<code>Hi jiaoqiang2014! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>表示，使用https没有使用ssh，切换到项目<code>.git</code>同级目录下，设置一下使用ssh就行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote set-url origin git@github.com:lut/EvolutionApp.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、docker-安装\"><a href=\"#2、docker-安装\" class=\"headerlink\" title=\"2、docker 安装\"></a>2、docker 安装</h2><p>使用官方 docker doc 说明安装。</p>\n<h3 id=\"设置docker开机自启动\"><a href=\"#设置docker开机自启动\" class=\"headerlink\" title=\"设置docker开机自启动\"></a>设置docker开机自启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker安装mysql\"><a href=\"#docker安装mysql\" class=\"headerlink\" title=\"docker安装mysql\"></a>docker安装mysql</h3><h4 id=\"正常芯片\"><a href=\"#正常芯片\" class=\"headerlink\" title=\"正常芯片\"></a>正常芯片</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker pull mysql:8.0.28</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"M1芯片\"><a href=\"#M1芯片\" class=\"headerlink\" title=\"M1芯片\"></a>M1芯片</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker pull --platform linux/x86_64 mysql:8.0.28</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看安装的服务\"><a href=\"#查看安装的服务\" class=\"headerlink\" title=\"查看安装的服务\"></a>查看安装的服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker images</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-启动-mysql\"><a href=\"#docker-启动-mysql\" class=\"headerlink\" title=\"docker 启动 mysql\"></a>docker 启动 mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -p 3306:3306 --name mysql \\</span><br><span class=\"line\">-v /var/mysql/log:/var/log/mysql \\</span><br><span class=\"line\">-v /var/mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /var/mysql/conf:/etc/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456aa \\</span><br><span class=\"line\">-d mysql:8</span><br></pre></td></tr></table></figure>\n\n<p>上面代码不知道为啥启动不了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456aa -d mysql:8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动mysql容器\"><a href=\"#启动mysql容器\" class=\"headerlink\" title=\"启动mysql容器\"></a>启动mysql容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start mysql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进入-Mysql-容器\"><a href=\"#进入-Mysql-容器\" class=\"headerlink\" title=\"进入 Mysql 容器\"></a>进入 Mysql 容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it mysql bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"navicat-连接-docker-mysql\"><a href=\"#navicat-连接-docker-mysql\" class=\"headerlink\" title=\"navicat 连接 docker mysql\"></a>navicat 连接 docker mysql</h3><p>在腾讯云选择该服务器——&gt;管理-&gt;防火墙中需要添加 mysql 3306端口的规则，不然会被屏蔽。</p>\n<h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br><span class=\"line\">mkdir -p /mydata/redis/conf</span><br><span class=\"line\">touch /mydata/redis/conf</span><br></pre></td></tr></table></figure>\n\n<p>启动 redis 镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 6379:6379 --name redis \\</span><br><span class=\"line\">-v /mydata/redis/data:/data \\</span><br><span class=\"line\">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>检查redis安装是否成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it redis redis-cli</span><br><span class=\"line\">set key1 111</span><br><span class=\"line\">get key1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"持久化redis\"><a href=\"#持久化redis\" class=\"headerlink\" title=\"持久化redis\"></a>持久化redis</h4><p>redis重启之后会丢失内存中的数据，可以设置持久化到磁盘中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /mydata/redis/conf/redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>添加以下内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br><span class=\"line\">bind 0.0.0.0 -::1</span><br><span class=\"line\">requirepass 123456</span><br></pre></td></tr></table></figure>\n\n<p>给redis存值，重启，检查是否还存在。开启服务端TCP的6379端口。</p>\n<h3 id=\"docker-服务器重启自动启动程序\"><a href=\"#docker-服务器重启自动启动程序\" class=\"headerlink\" title=\"docker 服务器重启自动启动程序\"></a>docker 服务器重启自动启动程序</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker update mysql --restart=always</span><br></pre></td></tr></table></figure>\n","tags":["杂项"]},{"url":"/2022/04/16/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/","content":"<h2 id=\"configuration\"><a href=\"#configuration\" class=\"headerlink\" title=\"configuration\"></a>configuration</h2><p>该配置文件说明如何在本地搭建起环境，包括启动 mysql、启动虚拟机、启动 redis。</p>\n<h2 id=\"一、Mysql启动\"><a href=\"#一、Mysql启动\" class=\"headerlink\" title=\"一、Mysql启动\"></a>一、Mysql启动</h2><ul>\n<li>打开navicat 连接 127.0.0.1 即可。 </li>\n<li>可以使用 <a href=\"http://www.localhost:8080/demo/db/get\">http://www.localhost:8080/demo/db/get</a> 测试</li>\n</ul>\n<h2 id=\"二、Redis-启动\"><a href=\"#二、Redis-启动\" class=\"headerlink\" title=\"二、Redis 启动\"></a>二、Redis 启动</h2><p>redis 是使用 multipass 安装的虚拟机需要先启动虚拟机，然后在虚拟机中启动redis。</p>\n<h3 id=\"1、启动-multipass\"><a href=\"#1、启动-multipass\" class=\"headerlink\" title=\"1、启动 multipass\"></a>1、启动 multipass</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">multipass info -all</span><br><span class=\"line\">multipass shell XXX(host)</span><br></pre></td></tr></table></figure>\n<p>参考链接：<a href=\"http://www.manongjc.com/detail/21-gtzvxvzjtoaxswf.html\">http://www.manongjc.com/detail/21-gtzvxvzjtoaxswf.html</a></p>\n<h3 id=\"2、启动-redis\"><a href=\"#2、启动-redis\" class=\"headerlink\" title=\"2、启动 redis\"></a>2、启动 redis</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /usr/local/redis</span><br><span class=\"line\">redis-server redis.conf</span><br><span class=\"line\">redis-cli</span><br><span class=\"line\">auth 123456</span><br></pre></td></tr></table></figure>\n<p>可以使用 <a href=\"http://www.localhost:8080/demo/redis/get\">http://www.localhost:8080/demo/redis/get</a> 测试</p>\n<h2 id=\"三、压测\"><a href=\"#三、压测\" class=\"headerlink\" title=\"三、压测\"></a>三、压测</h2><h3 id=\"1-图形化压测\"><a href=\"#1-图形化压测\" class=\"headerlink\" title=\"1. 图形化压测\"></a>1. 图形化压测</h3><h3 id=\"2-命令行压测\"><a href=\"#2-命令行压测\" class=\"headerlink\" title=\"2. 命令行压测\"></a>2. 命令行压测</h3><p>首先，需要将jar包启动（参考<code>Spring Boot打jar包</code>）。然后，使用jmeter压测。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">jmeter.sh -n -t /Users/jq/Desktop/goods_list.jmx -l result.jtl</span><br></pre></td></tr></table></figure>\n<p>如果OOM，可以使用下面命令设置更大的JVM堆栈内存。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">JVM_ARGS=&quot;-Xms512m -Xmx5g&quot; jmeter.sh -n -t /Users/jq/Desktop/goods_list.jmx -l result.jtl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、Spring-Boot打war包。\"><a href=\"#四、Spring-Boot打war包。\" class=\"headerlink\" title=\"四、Spring Boot打war包。\"></a>四、Spring Boot打war包。</h2><h3 id=\"1-添加依赖\"><a href=\"#1-添加依赖\" class=\"headerlink\" title=\"1. 添加依赖\"></a>1. 添加依赖</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-添加\"><a href=\"#2-添加\" class=\"headerlink\" title=\"2. 添加\"></a>2. 添加</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">failOnMissingWebXml</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">failOnMissingWebXml</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fork</span>&gt;</span>true&lt;/fork</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-修改\"><a href=\"#3-修改\" class=\"headerlink\" title=\"3. 修改\"></a>3. 修改</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.imooc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>miaosha<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同时，把packaging中的jar修改为war。</p>\n<h3 id=\"4-修改MainApplication类\"><a href=\"#4-修改MainApplication类\" class=\"headerlink\" title=\"4. 修改MainApplication类\"></a>4. 修改MainApplication类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainApplication</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SpringBootServletInitializer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(MainApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title function_\">configure</span><span class=\"params\">(SpringApplicationBuilder builder)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.sources(MainApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-brew-安装-tomcat-9（和java8匹配\"><a href=\"#5-brew-安装-tomcat-9（和java8匹配\" class=\"headerlink\" title=\"5. brew 安装 tomcat@9（和java8匹配) \\\"></a>5. brew 安装 tomcat@9（和java8匹配) \\</h3><p>Brew会默认安装在/opt/homebrew/Cellar/目录下。</p>\n<h3 id=\"6-配置tomcat快速启动\"><a href=\"#6-配置tomcat快速启动\" class=\"headerlink\" title=\"6. 配置tomcat快速启动\"></a>6. 配置tomcat快速启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias tomcatstart=/opt/homebrew/Cellar/tomcat@9/9.0.60/libexec/bin/startup.sh</span><br><span class=\"line\">alias tomcatstop=/opt/homebrew/Cellar/tomcat@9/9.0.60/libexec/bin/shutdown.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-打成-war-包\"><a href=\"#7-打成-war-包\" class=\"headerlink\" title=\"7. 打成 war 包\"></a>7. 打成 war 包</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure>\n\n<p>在miaosha/target目录下生成miasma.war包。将miasma.war拷贝到 /opt/homebrew/Cellar/tomcat@9/9.0.60/libexec/webapps 目录下。</p>\n<h3 id=\"8-tomcatstart-启动tomcat。\"><a href=\"#8-tomcatstart-启动tomcat。\" class=\"headerlink\" title=\"8. tomcatstart 启动tomcat。 \\\"></a>8. tomcatstart 启动tomcat。 \\</h3><p>输入<a href=\"http://www.localhost:8080测试tomcat是否搭建成功。输入\">http://www.localhost:8080测试tomcat是否搭建成功。输入</a> <a href=\"http://www.localhost:8080/miaosha/login/to_login%EF%BC%8C\">http://www.localhost:8080/miaosha/login/to_login，</a> 查看登录界面，但目前不能登录，需要在/opt/homebrew/Cellar/tomcat@9/9.0.60/libexec/webapps/Root 目录下添加一些资源。</p>\n<h2 id=\"五、Spring-Boot打jar包\"><a href=\"#五、Spring-Boot打jar包\" class=\"headerlink\" title=\"五、Spring Boot打jar包\"></a>五、Spring Boot打jar包</h2><h3 id=\"1、添加依赖\"><a href=\"#1、添加依赖\" class=\"headerlink\" title=\"1、添加依赖\"></a>1、添加依赖</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fork</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">fork</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、修改\"><a href=\"#2、修改\" class=\"headerlink\" title=\"2、修改\"></a>2、修改</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.imooc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>miaosha<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、打成-jar-包\"><a href=\"#3、打成-jar-包\" class=\"headerlink\" title=\"3、打成 jar 包\"></a>3、打成 jar 包</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure>\n\n<p>在miaosha/target目录下生成miasma.jar包</p>\n<h3 id=\"4、运行jar，并输出到nohup文件。\"><a href=\"#4、运行jar，并输出到nohup文件。\" class=\"headerlink\" title=\"4、运行jar，并输出到nohup文件。\"></a>4、运行jar，并输出到nohup文件。</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nohup java -jar miaosha.jar &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、测试\"><a href=\"#5、测试\" class=\"headerlink\" title=\"5、测试\"></a>5、测试</h3><p>输入 <a href=\"http://www.localhost:8080/miaosha/login/to_login%EF%BC%8C\">http://www.localhost:8080/miaosha/login/to_login，</a> 查看登录界面，并且进行压测。 <br>输入 tail -f nohup.out 可以查看日志的末尾输出。</p>\n<h2 id=\"五、压测-redis\"><a href=\"#五、压测-redis\" class=\"headerlink\" title=\"五、压测 redis\"></a>五、压测 redis</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-benchmark -a 123456 -h 127.0.0.1 -p 6379 -c 100 -n 100000</span><br><span class=\"line\"></span><br><span class=\"line\">redis-benchmark -a 123456 -h 127.0.0.1 -p 6379 -q -d 100</span><br><span class=\"line\"></span><br><span class=\"line\">redis-benchmark -a 123456 -t set,lpush -n 100000 -q</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只测试单条命令</span></span><br><span class=\"line\">redis-benchmark -a 123456 -n 100000 -q script load &quot;redis.call(&#x27;set&#x27;,&#x27;foo&#x27;,&#x27;bar&#x27;)&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、页面优化技术\"><a href=\"#六、页面优化技术\" class=\"headerlink\" title=\"六、页面优化技术\"></a>六、页面优化技术</h2><ul>\n<li>页面缓存 + URL缓存 + 对象缓存 </li>\n<li>页面静态化（不需要重复下载页面，只需要下载动态的），前后端分离</li>\n<li>静态资源优化</li>\n<li>CDN优化</li>\n</ul>\n<h3 id=\"1、页面缓存\"><a href=\"#1、页面缓存\" class=\"headerlink\" title=\"1、页面缓存\"></a>1、页面缓存</h3><p>将 goods_list 页面的信息写入 redis，设置了60s的缓存时间。可以下命令测试：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">keys GoodsKey:gl</span><br><span class=\"line\">get GoodsKey:gl</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、URL-缓存\"><a href=\"#2、URL-缓存\" class=\"headerlink\" title=\"2、URL 缓存\"></a>2、URL 缓存</h3><p>和页面缓存大致一样，给 goods_detail 页面添加缓存，不同于 goods_list 页面的是 goods_detail 页面需要加用户的标号：”1”（<a href=\"http://www.localhost:8080/goods/to_detail/1%EF%BC%89%E3%80%82\">http://www.localhost:8080/goods/to_detail/1）。</a></p>\n<h3 id=\"3、对象缓存\"><a href=\"#3、对象缓存\" class=\"headerlink\" title=\"3、对象缓存\"></a>3、对象缓存</h3><p>此处的对象指的是用户对象，通过用户id将用户的信息写入缓存。</p>\n<p>MiaoshaUserService 类中的 updatePassword 方法，如何更新数据库密码。</p>\n<h3 id=\"4、页面静态化\"><a href=\"#4、页面静态化\" class=\"headerlink\" title=\"4、页面静态化\"></a>4、页面静态化</h3><p>将数据存在浏览器中，主要技术有：AngularJS、Vue.js等<br>此处使用简单的。</p>\n<p>服务端不直接返回html，只返回页面上动态的数据。在前端html页面中接受这些动态的数值即可。</p>\n<h4 id=\"思考：如何验证客户端加载了浏览器的本地缓存而不是服务端的数据？\"><a href=\"#思考：如何验证客户端加载了浏览器的本地缓存而不是服务端的数据？\" class=\"headerlink\" title=\"思考：如何验证客户端加载了浏览器的本地缓存而不是服务端的数据？\\\"></a>思考：如何验证客户端加载了浏览器的本地缓存而不是服务端的数据？\\</h4><p>304状态码表示服务端数据未改变，可直接使用客户端未过期的缓存。304状态码返回时不包含任何响应的主体部分。<br>请求首部包含<code>If-Modified-Since: Mon, 11 Apr 2022 10:07:49 GMT</code>，服务端会和资源的最近更新时间比较，确定是不是需要返回资源。不需要则返回304状态码，具体如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 304</span><br><span class=\"line\">Last-Modified: Mon, 11 Apr 2022 10:07:49 GMT</span><br><span class=\"line\">Date: Mon, 11 Apr 2022 10:10:19 GMT</span><br></pre></td></tr></table></figure>\n<h4 id=\"进一步优化\"><a href=\"#进一步优化\" class=\"headerlink\" title=\"进一步优化\"></a>进一步优化</h4><p>上面虽然没有直接下载服务端的数据，但还是请求了一次服务端。通过在静态资源中添加设置静态资源的有效时间，不访问服务器，直接使用客户端的缓存。\\</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>查看网页请求，发现响应如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200</span><br><span class=\"line\">Last-Modified: Mon, 11 Apr 2022 10:07:49 GMT</span><br><span class=\"line\">Content-Length: 4818</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Cache-Control: max-age=3600</span><br><span class=\"line\">Date: Mon, 11 Apr 2022 10:43:17 GMT</span><br></pre></td></tr></table></figure>\n<p><code>Cache-Control: max-age=3600</code>字段表示该资源可以在3600ms内复用。</p>\n<h2 id=\"问题1：库存会被减成负值\"><a href=\"#问题1：库存会被减成负值\" class=\"headerlink\" title=\"问题1：库存会被减成负值\"></a>问题1：库存会被减成负值</h2><h4 id=\"原因：两个人同时减库存时，调用的sql语句如下：\"><a href=\"#原因：两个人同时减库存时，调用的sql语句如下：\" class=\"headerlink\" title=\"原因：两个人同时减库存时，调用的sql语句如下：\"></a>原因：两个人同时减库存时，调用的sql语句如下：</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Update(&quot;update miaosha_goods set stock_count = stock_count - 1 where goods_id = #&#123;goodsId&#125;”)</span></span><br></pre></td></tr></table></figure>\n<p>当只有一个库存时会降为-1，此时可以在sql中加库存大于0的判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Update(&quot;update miaosha_goods set stock_count = stock_count - 1 where goods_id = #&#123;goodsId&#125; and stock_count &gt; 0”)</span>`）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题2：一个用户购买了两个同一个商品。\"><a href=\"#问题2：一个用户购买了两个同一个商品。\" class=\"headerlink\" title=\"问题2：一个用户购买了两个同一个商品。\"></a>问题2：一个用户购买了两个同一个商品。</h2><h4 id=\"原因：库存为10，同一个用户同时发出两个请求，同时进入了判断库存等方法，导致一个用户买到两个商品。\"><a href=\"#原因：库存为10，同一个用户同时发出两个请求，同时进入了判断库存等方法，导致一个用户买到两个商品。\" class=\"headerlink\" title=\"原因：库存为10，同一个用户同时发出两个请求，同时进入了判断库存等方法，导致一个用户买到两个商品。\"></a>原因：库存为10，同一个用户同时发出两个请求，同时进入了判断库存等方法，导致一个用户买到两个商品。</h4><p>解决思路：购买流程是：减库存 -&gt; 下订单，下订单的时候有个订单表，有用户id和商品id，此处在订单表中给这两个字段建立联合唯一索引。这样创建订单时，如此该用户存在一个订单，再下另一个订单时就会出现重复。注意：在创建订单的函数前加<code>@Transactional</code>。<br>如果只给用户id建立唯一索引可以不？不行，允许用户秒杀其他商品。</p>\n<h3 id=\"5、静态资源优化\"><a href=\"#5、静态资源优化\" class=\"headerlink\" title=\"5、静态资源优化\"></a>5、静态资源优化</h3><ol>\n<li>JS/CSS 压缩，减少流浪；</li>\n<li>多个 JS/CSS 组合</li>\n<li>Tengine 在nginx基础上开发的<br>CDN:内容分发网络。 </li>\n</ol>\n<h2 id=\"七、秒杀接口优化\"><a href=\"#七、秒杀接口优化\" class=\"headerlink\" title=\"七、秒杀接口优化\"></a>七、秒杀接口优化</h2><h3 id=\"方案：\"><a href=\"#方案：\" class=\"headerlink\" title=\"方案：\"></a>方案：</h3><ul>\n<li>把秒杀商品信息加载到redis，减少mysql的访问。</li>\n<li>内存标记，减少一次redis查商品库存的访问：使用map（goodsId -&gt; boolean）， false表示还有库存，true表示没有库存，则秒杀结束。接下来的关于goodsId的请求不在访问redis，直接返回。</li>\n<li>通过在redis中预减库存，当库存不足，直接返回，不需要进一步查询Redis中的订单信息，以判断是否秒杀成功。减少了redis的访问。</li>\n<li>使用rabbitmq实现异步下单，达到削峰的作用。<h3 id=\"秒杀流程：\"><a href=\"#秒杀流程：\" class=\"headerlink\" title=\"秒杀流程：\"></a>秒杀流程：</h3></li>\n<li>系统初始化，把商品库存数量加载到redis。</li>\n<li>收到请求，内存标记，减少redis访问：</li>\n<li>redis预减库存，如果库存不足，设置该goodsId的map值为true，然后直接返回。</li>\n<li>请求入队，立即返回排队中。</li>\n<li>请求出队，生成订单，减少库存。</li>\n<li>客户端轮询，是否秒杀成功。</li>\n</ul>\n<h4 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h4><p>安装 RabbitMQ。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install erlang</span><br><span class=\"line\">erl</span><br></pre></td></tr></table></figure>\n<p>以上命令能正常输出说明<code>erlang</code>安装成功。接下来安装、启动并验证<code>rabbitmq</code>是否在监听5672端口。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install rabbitmq-server</span><br><span class=\"line\">sudo rabbitmq-server</span><br><span class=\"line\">netstat -nap | grep 5672</span><br></pre></td></tr></table></figure>\n<p>关闭<code>rabbitmq</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo rabbitmqctl stop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置一个-rabbitmq-的用户名和密码，默认存在一个用户-guest，密码为-guest。\"><a href=\"#设置一个-rabbitmq-的用户名和密码，默认存在一个用户-guest，密码为-guest。\" class=\"headerlink\" title=\"设置一个 rabbitmq 的用户名和密码，默认存在一个用户 guest，密码为 guest。\"></a>设置一个 rabbitmq 的用户名和密码，默认存在一个用户 guest，密码为 guest。</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_user YOUR_USERNAME YOUR_PASSWORD</span><br><span class=\"line\">rabbitmqctl set_user_tags YOUR_USERNAME administrator</span><br><span class=\"line\">rabbitmqctl set_permissions -p / YOUR_USERNAME &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><ul>\n<li>Nginx水平扩展。</li>\n<li>分库分表</li>\n</ul>\n<h2 id=\"八、安全优化\"><a href=\"#八、安全优化\" class=\"headerlink\" title=\"八、安全优化\"></a>八、安全优化</h2><ul>\n<li>秒杀接口地址隐藏</li>\n<li>数学公式验证码（可以削峰）</li>\n<li>接口限流放刷</li>\n</ul>\n<h3 id=\"1、秒杀接口地址隐藏\"><a href=\"#1、秒杀接口地址隐藏\" class=\"headerlink\" title=\"1、秒杀接口地址隐藏\"></a>1、秒杀接口地址隐藏</h3><p>思路：秒杀开始之前，先去请求接口获取秒杀地址。</p>\n<ul>\n<li>接口改造，带上PathVariable参数。</li>\n<li>添加生成地址的接口。</li>\n<li>秒杀收到请求，先验证PathVariable</li>\n</ul>\n<h4 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h4><p>秒杀开始，用户点击秒杀按钮时，在后端使用uuid+DM5生成一个str，并且以<code>用户id_商品id</code>为键，<code>str</code>为值存入redis。前端通过接口请求到这个str，拼接到路径中请求后端。后端取出这个str后和自己生成的oldStr对比（redis中的str），如果一致，则进入秒杀流程。</p>\n<h5 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h5><p>有人先请求前端的接口得到str，然后去访问秒杀接口，可行吗？？？</p>\n<h3 id=\"2、数学公式验证码\"><a href=\"#2、数学公式验证码\" class=\"headerlink\" title=\"2、数学公式验证码\"></a>2、数学公式验证码</h3><ul>\n<li>添加生成验证码的接口。</li>\n<li>在获取秒杀路径的时候，验证验证码。</li>\n<li>ScriptEngine使用。</li>\n</ul>\n<h4 id=\"流程-1\"><a href=\"#流程-1\" class=\"headerlink\" title=\"流程\"></a>流程</h4><p>秒杀开始时，前端请求后端生成验证码，然后将生成的验证码信息以<code>vc_用户id_秒杀商品id -&gt; 验证码结果</code>的形式存储在redis中，同时将验证码发给前端。前端展示给用户，用户输入结果，点击秒杀按钮。前端发送请求给后端（同时包含秒杀地址参数），后端先从redis中取出验证码结果验证是否正确。正确则开始在redis中生成path，并进行下一步操作。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>秒杀系统设计 负责项目的设计和开发 2022.4 - 2022.5</p>\n<p>• 项目介绍：为了解决秒杀商品时存在高并发的问题，本项目基于SpringBoot开发秒杀系统。本人主要负责登录模块、商品列表模块、商品详情模板、订单详情模块、秒杀接口优化部分。</p>\n<p>• 主要工作：</p>\n<ol>\n<li><p>实现了隧道代理，支持在 TCP 或 TLS 连接上多次发起 HTTP 请求。</p>\n</li>\n<li><p>支持指定隧道代理，支持添加首部、日志分级、跳过证书验证、动态 Ip 等功能。</p>\n</li>\n<li><p>支持用户自主解密 HTTPs 报文。</p>\n</li>\n<li><p>具有友好的 shell UI，能为用户提供日常使用的 shell 命令。</p>\n</li>\n</ol>\n<p>• 项目成果：通过隧道代理的方式复用 keep 到目标站点之间的 TCP 连接。</p>\n<p>• 个人收获：通过隧道代理的方式复用 keep 到目标站点之间的 TCP 连接。</p>\n<p>• 相关技术：SpringBoot、MySql、Redis、RabbitMQ、Thymeleaf</p>\n"},{"title":"玩转Spring全家桶学习笔记","url":"/2022/04/17/%E7%8E%A9%E8%BD%ACSpring%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"1、配置数据源\"><a href=\"#1、配置数据源\" class=\"headerlink\" title=\"1、配置数据源\"></a>1、配置数据源</h1><ul>\n<li>druid：快</li>\n<li>HikariCP：监控、SQL防注入</li>\n</ul>\n<h2 id=\"1-1-druid-定制连接池操作的各中环节\"><a href=\"#1-1-druid-定制连接池操作的各中环节\" class=\"headerlink\" title=\"1.1 druid 定制连接池操作的各中环节\"></a>1.1 druid 定制连接池操作的各中环节</h2><p>通过 Filter 可以实现。</p>\n","categories":["Spring"]}]