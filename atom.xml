<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JQ的技术博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-28T14:49:12.798Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>JQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java8新特性</title>
    <link href="http://example.com/2022/04/28/java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2022/04/28/java8%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2022-04-28T14:48:18.000Z</published>
    <updated>2022-04-28T14:49:12.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java8-新特性"><a href="#java8-新特性" class="headerlink" title="java8 新特性"></a>java8 新特性</h2><ul><li>接口的默认方法(Default Methods for Interfaces)</li><li>Lambda表达式</li><li>函数式接口</li><li>Streams(流)</li><li>Parallel Streams(并行流)</li><li>Maps</li><li>Date API(日期相关API)</li><li>Annotations(注解)</li></ul><p>链接总结的很棒<a href="https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/new-features/java8-tutorial-translate.md">java8 新特性</a>。</p><h3 id="接口的默认方法-Default-Methods-for-Interfaces"><a href="#接口的默认方法-Default-Methods-for-Interfaces" class="headerlink" title="接口的默认方法(Default Methods for Interfaces)"></a>接口的默认方法(Default Methods for Interfaces)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learnjava.java8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">java8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Formula</span> <span class="variable">formula</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Formula</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(formula.calculate(<span class="number">10</span>, <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用 default 关键字向接口添加的非抽象方法可以直接调用</span></span><br><span class="line">        System.out.println(formula.mul(<span class="number">10</span>, <span class="number">12</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Formula</span>&#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>;</span><br><span class="line">    <span class="comment">// Java 8使我们能够通过使用 default 关键字向接口添加非抽象方法实现。 此功能也称为虚拟扩展方法。</span></span><br><span class="line">   <span class="keyword">default</span> <span class="type">double</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> a*b;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;java8-新特性&quot;&gt;&lt;a href=&quot;#java8-新特性&quot; class=&quot;headerlink&quot; title=&quot;java8 新特性&quot;&gt;&lt;/a&gt;java8 新特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;接口的默认方法(Default Methods for Interfac</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gulimall配置</title>
    <link href="http://example.com/2022/04/20/gulimall%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/04/20/gulimall%E9%85%8D%E7%BD%AE/</id>
    <published>2022-04-20T01:44:14.000Z</published>
    <updated>2022-04-22T01:53:03.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h2><ul><li>项目结构搭建</li><li>配置Mysql</li><li>配置renren-fast和renren-fast-vue</li></ul><p>高版本的springboot默认不加载bootstrap.yml文件，需要在pom里加上依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、环境配置&quot;&gt;&lt;a href=&quot;#1、环境配置&quot; class=&quot;headerlink&quot; title=&quot;1、环境配置&quot;&gt;&lt;/a&gt;1、环境配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;项目结构搭建&lt;/li&gt;
&lt;li&gt;配置Mysql&lt;/li&gt;
&lt;li&gt;配置renren-fast和r</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开发环境安装杂项</title>
    <link href="http://example.com/2022/04/18/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E6%9D%82%E9%A1%B9/"/>
    <id>http://example.com/2022/04/18/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E6%9D%82%E9%A1%B9/</id>
    <published>2022-04-18T04:12:51.000Z</published>
    <updated>2022-04-20T08:34:46.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、配置git"><a href="#1、配置git" class="headerlink" title="1、配置git"></a>1、配置git</h2><ul><li>生成ssh</li><li>配置到github</li><li>测试</li></ul><h3 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;jiaoqiang2014@163.com&quot;</span><br></pre></td></tr></table></figure><h3 id="配置到github"><a href="#配置到github" class="headerlink" title="配置到github"></a>配置到github</h3><p>在<code>~/.ssh</code>目录下生成<code>id_rsa.pub</code>和<code>id_rsa</code>公钥和私钥。打开公钥，复制到github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /Users/jq/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果显示<code>Hi jiaoqiang2014! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>表示，使用https没有使用ssh，切换到项目<code>.git</code>同级目录下，设置一下使用ssh就行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:lut/EvolutionApp.git</span><br></pre></td></tr></table></figure><h2 id="2、docker-安装"><a href="#2、docker-安装" class="headerlink" title="2、docker 安装"></a>2、docker 安装</h2><p>使用官方 docker doc 说明安装。</p><h3 id="设置docker开机自启动"><a href="#设置docker开机自启动" class="headerlink" title="设置docker开机自启动"></a>设置docker开机自启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h3><h4 id="正常芯片"><a href="#正常芯片" class="headerlink" title="正常芯片"></a>正常芯片</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mysql:8.0.28</span><br></pre></td></tr></table></figure><h4 id="M1芯片"><a href="#M1芯片" class="headerlink" title="M1芯片"></a>M1芯片</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull --platform linux/x86_64 mysql:8.0.28</span><br></pre></td></tr></table></figure><h3 id="查看安装的服务"><a href="#查看安装的服务" class="headerlink" title="查看安装的服务"></a>查看安装的服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><h3 id="docker-启动-mysql"><a href="#docker-启动-mysql" class="headerlink" title="docker 启动 mysql"></a>docker 启动 mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /var/mysql/log:/var/log/mysql \</span><br><span class="line">-v /var/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /var/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456aa \</span><br><span class="line">-d mysql:8</span><br></pre></td></tr></table></figure><p>上面代码不知道为啥启动不了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456aa -d mysql:8</span><br></pre></td></tr></table></figure><h3 id="启动mysql容器"><a href="#启动mysql容器" class="headerlink" title="启动mysql容器"></a>启动mysql容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start mysql</span><br></pre></td></tr></table></figure><h3 id="进入-Mysql-容器"><a href="#进入-Mysql-容器" class="headerlink" title="进入 Mysql 容器"></a>进入 Mysql 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure><h3 id="navicat-连接-docker-mysql"><a href="#navicat-连接-docker-mysql" class="headerlink" title="navicat 连接 docker mysql"></a>navicat 连接 docker mysql</h3><p>在腾讯云选择该服务器——&gt;管理-&gt;防火墙中需要添加 mysql 3306端口的规则，不然会被屏蔽。</p><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf</span><br></pre></td></tr></table></figure><p>启动 redis 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>检查redis安装是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br><span class="line">set key1 111</span><br><span class="line">get key1</span><br></pre></td></tr></table></figure><h4 id="持久化redis"><a href="#持久化redis" class="headerlink" title="持久化redis"></a>持久化redis</h4><p>redis重启之后会丢失内存中的数据，可以设置持久化到磁盘中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mydata/redis/conf/redis.conf</span><br></pre></td></tr></table></figure><p>添加以下内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line">bind 0.0.0.0 -::1</span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><p>给redis存值，重启，检查是否还存在。开启服务端TCP的6379端口。</p><h3 id="docker-服务器重启自动启动程序"><a href="#docker-服务器重启自动启动程序" class="headerlink" title="docker 服务器重启自动启动程序"></a>docker 服务器重启自动启动程序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker update mysql --restart=always</span><br></pre></td></tr></table></figure><h2 id="3、前端项目配置杂项"><a href="#3、前端项目配置杂项" class="headerlink" title="3、前端项目配置杂项"></a>3、前端项目配置杂项</h2><p>在项目目录下下载需要的组件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmp install</span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! command failed</span><br><span class="line">npm ERR! command sh -c node install.js</span><br><span class="line">npm ERR! Only Mac 64 bits supported.</span><br></pre></td></tr></table></figure><p>使用下面命令可以解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --ignore-scripts</span><br><span class="line">npm uninstall node-saas      //卸载node -saas</span><br><span class="line">npm install node-sass --save-dev      //重新安装node -saas</span><br></pre></td></tr></table></figure><p>运行前端项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>如果报错可以试试下面代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache --force clean &amp;&amp; npm install --force node-sass</span><br></pre></td></tr></table></figure><h2 id="4、renrenfast生成"><a href="#4、renrenfast生成" class="headerlink" title="4、renrenfast生成"></a>4、renrenfast生成</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、配置git&quot;&gt;&lt;a href=&quot;#1、配置git&quot; class=&quot;headerlink&quot; title=&quot;1、配置git&quot;&gt;&lt;/a&gt;1、配置git&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;生成ssh&lt;/li&gt;
&lt;li&gt;配置到github&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/</summary>
      
    
    
    
    
    <category term="杂项" scheme="http://example.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>玩转Spring全家桶学习笔记</title>
    <link href="http://example.com/2022/04/17/%E7%8E%A9%E8%BD%ACSpring%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/04/17/%E7%8E%A9%E8%BD%ACSpring%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-17T13:21:32.000Z</published>
    <updated>2022-04-29T15:06:11.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二章-JDBC必知必会"><a href="#第二章-JDBC必知必会" class="headerlink" title="第二章 JDBC必知必会"></a>第二章 JDBC必知必会</h2><h3 id="1、配置单个数据源"><a href="#1、配置单个数据源" class="headerlink" title="1、配置单个数据源"></a>1、配置单个数据源</h3><p>建立h2、web、lombak的springboot。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.learn;</span><br><span class="line"><span class="keyword">import</span> com.example.learn.config.ProfileProperties;</span><br><span class="line"><span class="keyword">import</span> com.example.learn.service.LibraryProperties;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(DemoApplication.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(DemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">showConnection();</span><br><span class="line">showData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showData</span><span class="params">()</span> &#123;</span><br><span class="line">jdbcTemplate.queryForList(<span class="string">&quot;SELECT * FROM FOO&quot;</span>).forEach(row -&gt; log.info(row.toString()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">log.info(dataSource.toString());</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">log.info(conn.toString());</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resource目录先创建schema.sql文件，写入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> FOO (ID <span class="type">INT</span> <span class="keyword">IDENTITY</span>, BAR <span class="type">VARCHAR</span>(<span class="number">64</span>));</span><br></pre></td></tr></table></figure><p>在resource目录先创建data.sql文件，写入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> FOO (ID, BAR) <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> FOO (ID, BAR) <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;bbb&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2、配置多个数据源"><a href="#2、配置多个数据源" class="headerlink" title="2、配置多个数据源"></a>2、配置多个数据源</h3><p>配置文件<code>application.properties</code>中写入数据源的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">foo.datasource.url=jdbc:h2:mem:foo</span><br><span class="line">foo.datasource.username=sa</span><br><span class="line">foo.datasource.password=</span><br><span class="line"></span><br><span class="line">bar.datasource.url=jdbc:h2:mem:bar</span><br><span class="line">bar.datasource.username=sa</span><br><span class="line">bar.datasource.password=</span><br></pre></td></tr></table></figure><p>需要指定使用什么连接池：COMMONS-DBCP、TOMCAT-JDBC、HIKARICP。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiDatasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排除自动配置，进行手动配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">DataSourceTransactionManagerAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">JdbcTemplateAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiDataSourceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MultiDataSourceApplication.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(MultiDataSourceApplication.class, args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;foo.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSourceProperties <span class="title function_">fooDataSourceProperties</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">fooDataSource</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">DataSourceProperties</span> <span class="variable">dataSourceProperties</span> <span class="operator">=</span> fooDataSourceProperties();</span><br><span class="line">log.info(<span class="string">&quot;foo datasource:&#123;&#125;&quot;</span>, dataSourceProperties.getUrl());</span><br><span class="line"><span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">fooTxManager</span><span class="params">(DataSource fooDataSource)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(fooDataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;bar.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSourceProperties <span class="title function_">barDataSourceProperties</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">barDataSource</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">DataSourceProperties</span> <span class="variable">dataSourceProperties</span> <span class="operator">=</span> barDataSourceProperties();</span><br><span class="line">log.info(<span class="string">&quot;bar datasource:&#123;&#125;&quot;</span>, dataSourceProperties.getUrl());</span><br><span class="line"><span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">barTxManager</span><span class="params">(DataSource barDataSource)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(barDataSource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、数据库连接池推荐"><a href="#3、数据库连接池推荐" class="headerlink" title="3、数据库连接池推荐"></a>3、数据库连接池推荐</h3><ul><li>druid：快</li><li>HikariCP：监控、SQL防注入</li></ul><h3 id="4、JdbcTemplate-的使用"><a href="#4、JdbcTemplate-的使用" class="headerlink" title="4、JdbcTemplate 的使用"></a>4、JdbcTemplate 的使用</h3><p>首先，添加H2数据库的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后,创建和表对应的Entiy。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，完成数据库的查询，添加等功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> simplejdbcdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.simple.SimpleJdbcInsert;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FooDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpleJdbcInsert simpleJdbcInsert;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertData</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 方法一：使用jdbcTemplate</span></span><br><span class="line">        Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>).forEach(bar -&gt; &#123;</span><br><span class="line">            jdbcTemplate.update(<span class="string">&quot;insert into Foo (bar) values (?)&quot;</span>, bar);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：使用simpleJdbcInsert</span></span><br><span class="line">HashMap&lt;String, String&gt; row = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        row.put(<span class="string">&quot;bar&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="type">Number</span> <span class="variable">id</span> <span class="operator">=</span> simpleJdbcInsert.executeAndReturnKey(row);</span><br><span class="line">        log.info(<span class="string">&quot;ID of d: &#123;&#125;&quot;</span>, id.longValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listData</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Count: &#123;&#125;&quot;</span>,jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from foo&quot;</span>, Long.class));</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = jdbcTemplate.queryForList(<span class="string">&quot;select bar from foo&quot;</span>, String.class);</span><br><span class="line">        list.forEach(s -&gt; &#123;log.info(<span class="string">&quot;Bar: &#123;&#125;&quot;</span>, s);&#125;);</span><br><span class="line"></span><br><span class="line">        List&lt;Foo&gt; fooList = jdbcTemplate.query(<span class="string">&quot;select * from foo&quot;</span>, <span class="keyword">new</span> <span class="title class_">RowMapper</span>&lt;Foo&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Foo <span class="title function_">mapRow</span><span class="params">(ResultSet rs, <span class="type">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">                <span class="keyword">return</span> Foo.builder().id(rs.getLong(<span class="number">1</span>)).bar(rs.getString(<span class="number">2</span>)).build();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        fooList.forEach(f -&gt; log.info(<span class="string">&quot;Foo: &#123;&#125;&quot;</span>, f));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在程序入口调用数据库操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> simplejdbcdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.simple.SimpleJdbcInsert;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SiampleJdbcDemoApplication</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(SiampleJdbcDemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">FooDao fooDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> SimpleJdbcInsert <span class="title function_">simpleJdbcInsert</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line"><span class="comment">// 将 FOO 和 ID 绑定。</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleJdbcInsert</span>(jdbcTemplate)</span><br><span class="line">.withTableName(<span class="string">&quot;FOO&quot;</span>).usingGeneratedKeyColumns(<span class="string">&quot;ID&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">fooDao.insertData();</span><br><span class="line">fooDao.listData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、NamedParameterJdbcTemplate"><a href="#5、NamedParameterJdbcTemplate" class="headerlink" title="5、NamedParameterJdbcTemplate"></a>5、NamedParameterJdbcTemplate</h3><h3 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h3><ul><li>编程式事务</li><li>声明式事务（推荐使用）<h4 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h4></li><li>TransactionTemplate</li><li>PlatformTransactionTemplate  </li></ul><p>引入H2数据库的依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionCallbackWithoutResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionDemoApplication</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(TransactionDemoApplication.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(TransactionDemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">log.info(<span class="string">&quot;count before transaction: &#123;&#125;&quot;</span>, getCount());</span><br><span class="line"></span><br><span class="line">transactionTemplate.execute(<span class="keyword">new</span> <span class="title class_">TransactionCallbackWithoutResult</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span> &#123;</span><br><span class="line">jdbcTemplate.execute(<span class="string">&quot;INSERT INTO FOO (ID, BAR) VALUES (1, &#x27;AAA&#x27;)&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;count in transaction: &#123;&#125;&quot;</span>, getCount());</span><br><span class="line">status.setRollbackOnly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;count after transaction: &#123;&#125;&quot;</span>, getCount());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getCount</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//List&lt;Integer&gt; list = jdbcTemplate.queryForList(&quot;select count(*) as cnt from FOO&quot;, Integer.class);</span></span><br><span class="line"><span class="comment">//log.info(String.valueOf(list.get(0)));</span></span><br><span class="line"><span class="keyword">return</span> (<span class="type">long</span>)jdbcTemplate.queryForList(<span class="string">&quot;select count(*) as cnt from FOO&quot;</span>).get(<span class="number">0</span>).get(<span class="string">&quot;cnt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h4><p>在 XML 配置文件中配置或者基于注解，实际是通过 AOP 实现（基于@Transactional 的全注解方式使用最多）。</p><p>测试声明式事务核心方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DeclarativeTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FooServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">FooService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    FooService fooService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertRecord</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO FOO (BAR) VALUES (&#x27;AAA&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = RollbackException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertThenRollback</span><span class="params">()</span> <span class="keyword">throws</span> RollbackException &#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO FOO (BAR) VALUES (&#x27;BBB&#x27;)&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RollbackException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeInsertThenRollback</span><span class="params">()</span> <span class="keyword">throws</span> RollbackException &#123;</span><br><span class="line">                <span class="comment">// 思考这两个方法的不同。</span></span><br><span class="line"><span class="comment">//        insertThenRollback();</span></span><br><span class="line">        fooService.insertThenRollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始调用时需要开启事务注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DeclarativeTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AdviceMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement(mode = AdviceMode.PROXY)</span>   <span class="comment">// 开启事务注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeclarativeTransactionDemoApplication</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FooService fooService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DeclarativeTransactionDemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        fooService.insertRecord();</span><br><span class="line">        log.info(<span class="string">&quot;AAA: &#123;&#125;&quot;</span>, jdbcTemplate. queryForObject(<span class="string">&quot;SELECT COUNT(*) FROM FOO WHERE BAR=&#x27;AAA&#x27;&quot;</span>, Long.class));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fooService.insertThenRollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RollbackException e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;BBB &#123;&#125;&quot;</span>,jdbcTemplate.queryForObject(<span class="string">&quot;SELECT COUNT(*) FROM FOO WHERE BAR=&#x27;BBB&#x27;&quot;</span>, Long.class));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fooService.invokeInsertThenRollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RollbackException e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;BBB &#123;&#125;&quot;</span>,jdbcTemplate.queryForObject(<span class="string">&quot;SELECT COUNT(*) FROM FOO WHERE BAR=&#x27;BBB&#x27;&quot;</span>, Long.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DeclarativeTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FooService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertRecord</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertThenRollback</span><span class="params">()</span> <span class="keyword">throws</span> RollbackException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeInsertThenRollback</span><span class="params">()</span> <span class="keyword">throws</span> RollbackException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DeclarativeTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RollbackException</span> <span class="keyword">extends</span> <span class="title class_">Throwable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事务的传播特性"><a href="#事务的传播特性" class="headerlink" title="事务的传播特性"></a>事务的传播特性</h4><p><strong>TransactionDefinition.PROPAGATION_REQUIRED</strong><br>使用的最多的一个事务传播行为，我们平时经常使用的@Transactional注解默认使用就是这个事务传播行为。<br>如果当前存在事务，则加入该事务，不会创建新事务；如果当前没有事务，则创建一个新的事务。</p><p><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW</strong><br>始终新起一个事务，两个事务没有关联。</p><p><strong>TransactionDefinition.PROPAGATION_NESTED</strong></p><ul><li>有事务：在原事务内启动一个内嵌事务。两个事务有关联，外部事务回滚，内嵌事务也会回滚。</li></ul><p><strong>TransactionDefinition.PROPAGATION_MANDATORY</strong><br>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</p><p>代码实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DeclarativeTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FooServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">FooService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FooService fooService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = RollbackException.class, propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertThenRollback</span><span class="params">()</span> <span class="keyword">throws</span> RollbackException &#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO FOO (BAR) VALUES (&#x27;BBB&#x27;)&quot;</span>);</span><br><span class="line">        <span class="comment">// throw new RollbackException();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = RollbackException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeInsertThenRollback</span><span class="params">()</span> <span class="keyword">throws</span> RollbackException &#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO FOO (BAR) VALUES (&#x27;AAA&#x27;)&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fooService.insertThenRollback();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RollbackException e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;RollbackException&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RollbackException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/17/%E7%8E%A9%E8%BD%ACSpring%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/../images/8d1542c72a220d01da05ce791304e2803b1fb05f16400305babfafdf9b0289bb.png" alt="事务的传播特性"></p><p><img src="/2022/04/17/%E7%8E%A9%E8%BD%ACSpring%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/../images/fe7f6ebc510e9a192a19749197febf38cb9950cebdeae177e6a9c8daf9d89287.png" alt="事务的传播特性2">  </p><h3 id="7、慢-SQL-日志"><a href="#7、慢-SQL-日志" class="headerlink" title="7、慢 SQL 日志"></a>7、慢 SQL 日志</h3><p>开启慢 SQL 日志，设置超过 100ms 的sql为慢sql。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.druid.filter.stat.log-slow-sql=<span class="literal">true</span></span><br><span class="line">spring.datasource.druid.filter.stat.slow-sql-millis=<span class="number">100</span></span><br></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectForUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">jdbcTemplate.queryForObject(<span class="string">&quot;select id from foo where id = 1 for update&quot;</span>, Long.class);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DeclarativeTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AdviceMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement(mode = AdviceMode.PROXY)</span>   <span class="comment">// 开启事务注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeclarativeTransactionDemoApplication</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FooService fooService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DeclarativeTransactionDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(dataSource.toString());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; fooService.selectForUpdate()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; fooService.selectForUpdate()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.alibaba.druid.filter.stat.StatFilter: slow sql <span class="number">212</span> millis. select id from foo <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">for</span> update[]</span><br></pre></td></tr></table></figure><h2 id="第三章-O-R-Mapping-实践"><a href="#第三章-O-R-Mapping-实践" class="headerlink" title="第三章 O/R Mapping 实践"></a>第三章 O/R Mapping 实践</h2><p> ORM（Object/Relational Mapping）”对象-关系映射”。简单说，ORM 就是通过实例对象的语法，完成关系型数据库的操作的技术。<br> 推荐阅读: <a href="https://zhuanlan.zhihu.com/p/115507328">JPA、Hibernate、Spring Data JPA之间的关系</a></p><h3 id="1、Spring-Data-JPA"><a href="#1、Spring-Data-JPA" class="headerlink" title="1、Spring Data JPA"></a>1、Spring Data JPA</h3><p>Java 持久层框架访问数据库的方式大致分为两种。一种以 SQL 核心，封装一定程度的 JDBC 操作，比如： MyBatis。另一种是以 Java 实体类为核心，将实体类的和数据库表之间建立映射关系，也就是我们说的ORM框架，如：Hibernate、Spring Data JPA（Java Persistence API Java持久层API）。</p><h4 id="Spring-Data-JPA-提供的支持"><a href="#Spring-Data-JPA-提供的支持" class="headerlink" title="Spring Data JPA 提供的支持"></a>Spring Data JPA 提供的支持</h4><ul><li>@EnableJpaRepositories</li><li>Repository 接口：<ul><li>CrudRepository&lt;T, ID&gt;</li><li>PagingAndSortingRepository&lt;T, ID&gt;</li><li>JpaRepository&lt;T, ID&gt;</li></ul></li><li>Repository 实现类：<ul><li>SimpleJpaRepository</li><li>QueryDslJpaRepository</li></ul></li></ul><h3 id="2、使用-Spring-Data-JPA-操作数据库"><a href="#2、使用-Spring-Data-JPA-操作数据库" class="headerlink" title="2、使用 Spring Data JPA 操作数据库"></a>2、使用 Spring Data JPA 操作数据库</h3><h4 id="创建实体（表）"><a href="#创建实体（表）" class="headerlink" title="创建实体（表）"></a>创建实体（表）</h4><p>使用SpringBoot内嵌的H2数据库。创建一个咖啡表和一个咖啡订单表。<br><strong>咖啡表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jq.coffe.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.CreationTimestamp;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.Type;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.UpdateTimestamp;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span><span class="comment">// 实体</span></span><br><span class="line"><span class="meta">@Table(name = &quot;T_MENU&quot;)</span></span><br><span class="line"><span class="meta">@Builder</span>  <span class="comment">// @Builder声明表示实体可以使用Builder方式初始化</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="meta">@Type(type = &quot;org.jadira.usertype.moneyandcurrency.joda.PersistentMoneyMinorAmount&quot;,</span></span><br><span class="line"><span class="meta">    parameters = &#123;@org.hibernate.annotations.Parameter(name = &quot;currencyCode&quot;, value = &quot;CNY&quot;)&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Money price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>咖啡订单表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jq.coffe.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.model.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.model.Coffee;</span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.model.OrderState;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Enumerated;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.JoinTable;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.ManyToMany;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.OrderBy;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;T_ORDER&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeOrder</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String customer;</span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable(name = &quot;T_ORDER_COFFEE&quot;)</span><span class="comment">// 创建一个 T_ORDER_COFFEE 表</span></span><br><span class="line">    <span class="meta">@OrderBy(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Coffee&gt; items;</span><br><span class="line">    <span class="meta">@Enumerated</span></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span><span class="comment">// 可以为空</span></span><br><span class="line">    <span class="keyword">private</span> OrderState state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>父类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jq.coffe.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.CreationTimestamp;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.Type;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.UpdateTimestamp;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个父类,将这些共同属性放到这个父类中, 并且在父类上加上@MappedSuperclass注解.注意:标注为@MappedSuperclass的类将不是一个完整的实体类，他将不会映射到数据库表，但是他的属性都将映射到其子类的数据库字段中。</span></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span><span class="comment">// 表示主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span><span class="comment">// 主键生成规则</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column(updatable = false)</span><span class="comment">// 不可以更新</span></span><br><span class="line">    <span class="meta">@CreationTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@UpdateTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现-操作数据库的接口"><a href="#实现-操作数据库的接口" class="headerlink" title="实现 操作数据库的接口"></a>实现 操作数据库的接口</h4><p>这些接口的命名是固定好的，只要按规定格式命名，Spring Boot JPA 就会帮我们做具体操作数据库的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jq.coffe.repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.NoRepositoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.PagingAndSortingRepository;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NoRepositoryBean</span>   <span class="comment">// 表示不会作为一个Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseRepository</span>&lt;T, Long&gt; <span class="keyword">extends</span> <span class="title class_">PagingAndSortingRepository</span>&lt;T, Long&gt; &#123;</span><br><span class="line">    List&lt;T&gt; <span class="title function_">findTop3ByOrderByUpdateTimeDescIdAsc</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>操作咖啡表的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jq.coffe.repository;</span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.model.Coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoffeeRepository</span> <span class="keyword">extends</span> <span class="title class_">BaseRepository</span>&lt;Coffee, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>操作咖啡订单表的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jq.coffe.repository;</span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.model.CoffeeOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoffeeOrderRepository</span> <span class="keyword">extends</span> <span class="title class_">BaseRepository</span>&lt;CoffeeOrder, Long&gt; &#123;</span><br><span class="line">    List&lt;CoffeeOrder&gt; <span class="title function_">findByCustomerOrderById</span><span class="params">(String customer)</span>;</span><br><span class="line">    List&lt;CoffeeOrder&gt; <span class="title function_">findByItems_Name</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jq.coffe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.model.Coffee;</span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.model.CoffeeOrder;</span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.model.OrderState;</span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.repository.CoffeeOrderRepository;</span><br><span class="line"><span class="keyword">import</span> com.jq.coffe.repository.CoffeeRepository;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.CurrencyUnit;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeApplication</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">CoffeeRepository coffeeRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">CoffeeOrderRepository orderRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(CoffeApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">initOrders();</span><br><span class="line">findOrders();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initOrders</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Coffee</span> <span class="variable">espresso</span> <span class="operator">=</span> Coffee.builder().name(<span class="string">&quot;espresso&quot;</span>)</span><br><span class="line">.price(Money.of(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), <span class="number">20.0</span>))</span><br><span class="line">.build();</span><br><span class="line">coffeeRepository.save(espresso);</span><br><span class="line">log.info(<span class="string">&quot;Coffee: &#123;&#125;&quot;</span>, espresso);</span><br><span class="line"></span><br><span class="line"><span class="type">Coffee</span> <span class="variable">latte</span> <span class="operator">=</span> Coffee.builder().name(<span class="string">&quot;latte&quot;</span>)</span><br><span class="line">.price(Money.of(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), <span class="number">30.0</span>))</span><br><span class="line">.build();</span><br><span class="line">coffeeRepository.save(latte);</span><br><span class="line">log.info(<span class="string">&quot;Coffee: &#123;&#125;&quot;</span>, latte);</span><br><span class="line"></span><br><span class="line"><span class="type">CoffeeOrder</span> <span class="variable">order</span> <span class="operator">=</span> CoffeeOrder.builder()</span><br><span class="line">.customer(<span class="string">&quot;Li Lei&quot;</span>)</span><br><span class="line">.items(Collections.singletonList(espresso))<span class="comment">// 创建不可变List的单个元素</span></span><br><span class="line">.state(OrderState.INIT)</span><br><span class="line">.build();</span><br><span class="line">orderRepository.save(order);</span><br><span class="line">log.info(<span class="string">&quot;Order: &#123;&#125;&quot;</span>, order);</span><br><span class="line"></span><br><span class="line">order = CoffeeOrder.builder()</span><br><span class="line">.customer(<span class="string">&quot;Li Lei&quot;</span>)</span><br><span class="line">.items(Arrays.asList(espresso, latte))</span><br><span class="line">.state(OrderState.INIT)</span><br><span class="line">.build();</span><br><span class="line">orderRepository.save(order);</span><br><span class="line">log.info(<span class="string">&quot;Order: &#123;&#125;&quot;</span>, order);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findOrders</span><span class="params">()</span> &#123;</span><br><span class="line">coffeeRepository</span><br><span class="line">.findAll(Sort.by(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>))</span><br><span class="line">.forEach(c -&gt; log.info(<span class="string">&quot;Loading &#123;&#125;&quot;</span>, c));</span><br><span class="line"></span><br><span class="line">List&lt;CoffeeOrder&gt; list = orderRepository.findTop3ByOrderByUpdateTimeDescIdAsc();</span><br><span class="line">log.info(<span class="string">&quot;findTop3ByOrderByUpdateTimeDescIdAsc: &#123;&#125;&quot;</span>, getJoinedOrderId(list));</span><br><span class="line"></span><br><span class="line">list = orderRepository.findByCustomerOrderById(<span class="string">&quot;Li Lei&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;findByCustomerOrderById: &#123;&#125;&quot;</span>, getJoinedOrderId(list));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不开启事务会因为没Session而报LazyInitializationException</span></span><br><span class="line">list.forEach(o -&gt; &#123;</span><br><span class="line">log.info(<span class="string">&quot;Order &#123;&#125;&quot;</span>, o.getId());</span><br><span class="line">o.getItems().forEach(i -&gt; log.info(<span class="string">&quot;  Item &#123;&#125;&quot;</span>, i));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">list = orderRepository.findByItems_Name(<span class="string">&quot;latte&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;findByItems_Name: &#123;&#125;&quot;</span>, getJoinedOrderId(list));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getJoinedOrderId</span><span class="params">(List&lt;CoffeeOrder&gt; list)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> list.stream().map(o -&gt; o.getId().toString())</span><br><span class="line">.collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、MyBatis-操作数据库"><a href="#3、MyBatis-操作数据库" class="headerlink" title="3、MyBatis 操作数据库"></a>3、MyBatis 操作数据库</h3><ul><li><a href="https://gitee.com/geektime-geekbang/geektime-spring-family/tree/master/Chapter%203/mybatis-demo">代码仓库</a></li></ul><p>一款持久化框架，支持定制化SQL、存储过程和高级映射。JPA中SQL是框架自动生成的，MyBatis是自己手写的。</p><p>定义<code>Coffee</code>，其中 Price 使用<code>Joda-Money</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Money price;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建表：新建 schema.sql 文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_coffee (</span><br><span class="line">    id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    price <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    create_time <span class="type">timestamp</span>,</span><br><span class="line">    update_time <span class="type">timestamp</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> Mapper sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis.model.Coffee;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoffeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert into t_coffee (name, price, create_time, update_time) values (&quot;latte&quot;,30.0, &#x27;2022-05-06&#x27;, &#x27;2022-05-06&#x27;);</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into t_coffee (name, price, create_time, update_time) values (#&#123;name&#125;, #&#123;price&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyColumn = &quot;id&quot;, keyProperty = &quot;id&quot;)</span> <span class="comment">// 指定在数据库中的字段名 id，实例对象中主键的属性名 id。</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">save</span><span class="params">(Coffee coffee)</span>;    <span class="comment">// 返回的是变动记录的条数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// select * from t_coffee where id = #&#123;id&#125;</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_coffee where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true, column = &quot;id&quot;, property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;), // 实例对象名字为 create_time，数据库中名字为 createTime。</span></span><br><span class="line"><span class="meta">            // map-underscore-to-camel-case = true 可以实现一样的效果</span></span><br><span class="line"><span class="meta">            // @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="comment">// @Param(&quot;id&quot;)对应where id = #&#123;id&#125;里的#&#123;id&#125;，给个例子，万一大家以后变量名和参数名不一样，也好知道怎么写。</span></span><br><span class="line">    Coffee <span class="title function_">findById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入类型转换的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 表示是类型转化时包的前缀</span><br><span class="line">mybatis.type-handlers-<span class="keyword">package</span>=com.example.mybatis.handler</span><br><span class="line"># 将下划线转化为驼峰规则</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-<span class="keyword">case</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>定义自己的handle，用于处理Money的类型转换（类中使用 Money 类型的price，数据库中使用 bigint 类型的price）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.CurrencyUnit;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类中使用 Money 类型的price，数据库中使用 bigint 类型的price。</span></span><br><span class="line"><span class="comment"> * mybatis在没有配置handler时，会根据参数或者返回结果的不同，默认为我们选择合适的TypeHandler处理。</span></span><br><span class="line"><span class="comment"> * 当我们需要特殊的字段处理时，可以配置自己的handler。</span></span><br><span class="line"><span class="comment"> * 首先，在配置文件中引入 配置的包。</span></span><br><span class="line"><span class="comment"> * 然后，实现 BaseTypeHandler 接口完成自己的类。</span></span><br><span class="line"><span class="comment"> * 在 Money 与 Long 之间转换的 TypeHandler，处理 CNY 人民币</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoneyTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span>&lt;Money&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="type">int</span> i, Money parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        ps.setLong(i, parameter.getAmountMinorLong());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> parseMoney(rs.getLong(columnName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">getNullableResult</span><span class="params">(ResultSet rs, <span class="type">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> parseMoney(rs.getLong(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">getNullableResult</span><span class="params">(CallableStatement cs, <span class="type">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> parseMoney(cs.getLong(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Money <span class="title function_">parseMoney</span><span class="params">(Long value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Money.of(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), value / <span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis.mapper.CoffeeMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.mybatis.model.Coffee;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.CurrencyUnit;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mybatis.mapper&quot;)</span><span class="comment">// 扫描对应包里边的mapper映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisApplication</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">CoffeeMapper coffeeMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(MybatisApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 name 的值设置为 espresso，将price的值设置为 20.0。和sql中的$&#123;name&#125;和$&#123;price&#125;对应。</span></span><br><span class="line"><span class="comment">// @Insert(&quot;insert into t_coffee (name, price, create_time, update_time) values (#&#123;name&#125;, #&#123;price&#125;, now(), now())&quot;)</span></span><br><span class="line"><span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> Coffee.builder().name(<span class="string">&quot;espresso&quot;</span>)</span><br><span class="line">.price(Money.of(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), <span class="number">20.0</span>))</span><br><span class="line">.createTime(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">.updateTime(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">.build();</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> coffeeMapper.save(coffee);</span><br><span class="line">log.info(<span class="string">&quot;Save &#123;&#125; Coffee: &#123;&#125;&quot;</span>, count, coffee);</span><br><span class="line"></span><br><span class="line">coffee = Coffee.builder().name(<span class="string">&quot;latte&quot;</span>)</span><br><span class="line">.price(Money.of(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), <span class="number">25.0</span>))</span><br><span class="line">.createTime(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">.updateTime(<span class="keyword">new</span> <span class="title class_">Date</span>()).build();</span><br><span class="line">count = coffeeMapper.save(coffee);</span><br><span class="line">log.info(<span class="string">&quot;Save &#123;&#125; Coffee: &#123;&#125;&quot;</span>, count, coffee);</span><br><span class="line"></span><br><span class="line">coffeeMapper.findById(coffee.getId());</span><br><span class="line">log.info(<span class="string">&quot;Find Coffee: &#123;&#125;&quot;</span>, coffee);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、MaBatis-Generator"><a href="#4、MaBatis-Generator" class="headerlink" title="4、MaBatis Generator"></a>4、MaBatis Generator</h3><p><a href="https://gitee.com/geektime-geekbang/geektime-spring-family/tree/master/Chapter%203/mybatis-generator-demo">代码仓库</a></p><h3 id="5、MaBatis-PageHelper"><a href="#5、MaBatis-PageHelper" class="headerlink" title="5、MaBatis PageHelper"></a>5、MaBatis PageHelper</h3><p><a href="https://gitee.com/geektime-geekbang/geektime-spring-family/tree/master/Chapter%203/mybatis-pagehelper-demo">代码仓库</a></p><h2 id="第四章-NoSQL-实践"><a href="#第四章-NoSQL-实践" class="headerlink" title="第四章 NoSQL 实践"></a>第四章 NoSQL 实践</h2><h3 id="1、docker-的一些环境安装"><a href="#1、docker-的一些环境安装" class="headerlink" title="1、docker 的一些环境安装"></a>1、docker 的一些环境安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongo -p 27017:27017 -v ~/docker-data/mongo:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin -d mongo</span><br></pre></td></tr></table></figure><h3 id="2、MongoDB"><a href="#2、MongoDB" class="headerlink" title="2、MongoDB"></a>2、MongoDB</h3><p>MongoDB 是一款开源的文档型数据库。Spring 对 MongoDB 的支持：</p><ul><li>Spring Data MongoDB<ul><li>MongoTemplate</li><li>Repository 支持</li></ul></li><li>注解<ul><li>@Document 和 @Entity 类似，表示类是一个文档（@Entity中是表）</li><li>@Id 每个文档都会对应一个 Id ，通过@Id表明类中哪一个属性是id。加上 @Id 之后，Spring Data Mongo 会将属性的类型转化为 MongoDB 中的 object ID。</li></ul></li><li>MongoTemplate<ul><li>save / remove</li><li>Criteria / Query / Update</li></ul></li><li>Spring Data MongoDB 的 Repository<ul><li>@EnableMongoRepositories</li><li>对应接口<ul><li>MongoRepository&lt;T, ID&gt;</li><li>PagingAndSortingRepository&lt;T, ID&gt;</li><li>CrudRepository&lt;T, ID&gt;</li></ul></li></ul></li></ul><h3 id="3、Spring-中访问-MongoDB"><a href="#3、Spring-中访问-MongoDB" class="headerlink" title="3、Spring 中访问 MongoDB"></a>3、Spring 中访问 MongoDB</h3><p><a href="https://gitee.com/geektime-geekbang/geektime-spring-family/tree/master/Chapter%204/mongo-demo">代码仓库</a></p><h4 id="3-1-安装-MongoDB"><a href="#3-1-安装-MongoDB" class="headerlink" title="3.1 安装 MongoDB"></a>3.1 安装 MongoDB</h4><p>使用 docker 安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker pull Mongo</span><br><span class="line">docker exec -it mongo bash</span><br><span class="line">mongo -u admin -p admin</span><br><span class="line"></span><br><span class="line">// 显示当前存在的库</span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line">// 使用springbucks库，没有会默认创建一个</span><br><span class="line">use springbucks</span><br><span class="line"></span><br><span class="line">// 创建 createUser，用户名和密码都为springbucks。</span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">user: &quot;springbucks&quot;,</span><br><span class="line">pwd: &quot;springbucks&quot;,</span><br><span class="line">roles: [</span><br><span class="line">&#123;role: &quot;readWrite&quot;, db: &quot;springbucks&quot;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">show users</span><br><span class="line"></span><br><span class="line">show collections;</span><br><span class="line"></span><br><span class="line">db.coffee.find();</span><br><span class="line"></span><br><span class="line">// 删除 coffee 中所有名为 espresso 的 Document 。</span><br><span class="line">db.coffee.remove(&#123;&quot;name&quot;:&quot;espresso&quot;&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-2-基于-MongoTemplate-的方法"><a href="#3-2-基于-MongoTemplate-的方法" class="headerlink" title="3.2 基于 MongoTemplate 的方法"></a>3.2 基于 MongoTemplate 的方法</h4><h5 id="创建-Coffee-类"><a href="#创建-Coffee-类" class="headerlink" title="创建 Coffee 类"></a>创建 Coffee 类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示类是一个文档</span></span><br><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;  <span class="comment">// 加上 @Id 之后，Spring Data Mongo 会将String类型转化为 MongoDB 中的 object ID。</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Money price;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置-MongoDB"><a href="#配置-MongoDB" class="headerlink" title="配置 MongoDB"></a>配置 MongoDB</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 用户名密码对应 springbucks:springbucks ，使用 springbucks 库。</span><br><span class="line">spring.data.mongodb.uri=mongodb:<span class="comment">//springbucks:springbucks@124.220.171.2:27017/springbucks</span></span><br><span class="line">spring.main.allow-circular-references=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="编写特殊类型-Money-的转化代码（-Mongo-gt-Money-类型）"><a href="#编写特殊类型-Money-的转化代码（-Mongo-gt-Money-类型）" class="headerlink" title="编写特殊类型 Money 的转化代码（ Mongo -&gt; Money 类型）"></a>编写特殊类型 Money 的转化代码（ Mongo -&gt; Money 类型）</h5><p>从 Money 类型转化为 Mongo 中的 Document 是自动转化的，不需要我们自己手写。其实就是转化为 Dson 类型（和json相似）。<br><strong>mongo 中存储的 Coffee 对象格式如下，这是一条 Document</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;626b59f24eb80121ff790475&quot;</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;espresso&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;money&quot;</span> <span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;currency&quot;</span> <span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;code&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CNY&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;numericCode&quot;</span> <span class="punctuation">:</span> <span class="number">156</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;decimalPlaces&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;amount&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;20.00&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;createTime&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2022-04-29T03:22:26.240Z&quot;</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;updateTime&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2022-04-29T03:22:26.240Z&quot;</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_class&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;com.example.mongo.model.Coffee&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Mongo -&gt; Money 类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongo.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.CurrencyUnit;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Document 转化为 Money。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoneyReadConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Document, Money&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">convert</span><span class="params">(Document source)</span> &#123;</span><br><span class="line">        <span class="comment">// Mongo 取出 Document 的数据，从中取出 money。</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">money</span> <span class="operator">=</span> (Document) source.get(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">        <span class="comment">// 从 money 中解析出金额。</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">amount</span> <span class="operator">=</span> Double.parseDouble(money.getString(<span class="string">&quot;amount&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">currency</span> <span class="operator">=</span> ((Document) money.get(<span class="string">&quot;currency&quot;</span>)).getString(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Money.of(CurrencyUnit.of(currency), amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用代码"><a href="#调用代码" class="headerlink" title="调用代码"></a>调用代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mongo.converter.MoneyReadConverter;</span><br><span class="line"><span class="keyword">import</span> com.example.mongo.model.Coffee;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.result.UpdateResult;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.internal.bulk.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.CurrencyUnit;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.ClientSessionException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.convert.MongoCustomConversions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.data.mongodb.core.query.Criteria.where;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.data.mongodb.core.query.Query.query;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MongoApplication</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(MongoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 spring-boot-autoconfigure -&gt; data -&gt; mongo -&gt; MongoDataAutoConfiguration.class</span></span><br><span class="line"><span class="comment">// 可以看出构造一个 MongoCustomConversions 类型的 bean ，可以替代 MongoDataAutoConfiguration 中的一部分配置。</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MongoCustomConversions <span class="title function_">mongoCustomConversions</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MongoCustomConversions</span>(Arrays.asList(<span class="keyword">new</span> <span class="title class_">MoneyReadConverter</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="type">Coffee</span> <span class="variable">espresso</span> <span class="operator">=</span> Coffee.builder()</span><br><span class="line">.name(<span class="string">&quot;espresso&quot;</span>)</span><br><span class="line">.price(Money.of(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), <span class="number">20.0</span>))</span><br><span class="line">.createTime(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">.updateTime(<span class="keyword">new</span> <span class="title class_">Date</span>()).build();</span><br><span class="line"><span class="type">Coffee</span> <span class="variable">saved</span> <span class="operator">=</span> mongoTemplate.save(espresso);</span><br><span class="line">log.info(<span class="string">&quot;Coffee &#123;&#125;&quot;</span>, saved);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line">List&lt;Coffee&gt; list = mongoTemplate.find(query(where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;espresso&quot;</span>)), Coffee.class);</span><br><span class="line">log.info(<span class="string">&quot;Find &#123;&#125; Coffee&quot;</span>, list.size());</span><br><span class="line">list.forEach(c -&gt; log.info(<span class="string">&quot;Coffee &#123;&#125;&quot;</span>, c));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span>); <span class="comment">// 为了看更新时间 1s</span></span><br><span class="line"><span class="type">UpdateResult</span> <span class="variable">result</span> <span class="operator">=</span> mongoTemplate.updateFirst(query(where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;espresso&quot;</span>)),</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">Update</span>().set(<span class="string">&quot;price&quot;</span>, Money.ofMajor(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), <span class="number">30</span>))</span><br><span class="line"> .currentDate(<span class="string">&quot;updateTime&quot;</span>),</span><br><span class="line"> Coffee.class);</span><br><span class="line"> log.info(<span class="string">&quot;Update Result: &#123;&#125;&quot;</span>, result.getModifiedCount());</span><br><span class="line"></span><br><span class="line"> <span class="type">Coffee</span> <span class="variable">updateOne</span> <span class="operator">=</span> mongoTemplate.findById(saved.getId(), Coffee.class);</span><br><span class="line"> log.info(<span class="string">&quot;Update Result: &#123;&#125;&quot;</span>, updateOne);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"> mongoTemplate.remove(updateOne);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-基于-Spring-Data-MongoDB-的-Repository-的方法"><a href="#3-3-基于-Spring-Data-MongoDB-的-Repository-的方法" class="headerlink" title="3.3 基于 Spring Data MongoDB 的 Repository 的方法"></a>3.3 基于 Spring Data MongoDB 的 Repository 的方法</h4><p><a href="https://gitee.com/geektime-geekbang/geektime-spring-family/tree/master/Chapter%204/mongo-repository-demo">代码仓库</a><br><strong>在基于 MongoTemplate 的方法基础上实现 MongoRepository 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongo.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mongo.model.Coffee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoffeeRepository</span> <span class="keyword">extends</span> <span class="title class_">MongoRepository</span>&lt;Coffee, String&gt; &#123;</span><br><span class="line">    List&lt;Coffee&gt; <span class="title function_">findByName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加<code>@EnableMongoRepositories</code>注解，修改调用代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mongo.converter.MoneyReadConverter;</span><br><span class="line"><span class="keyword">import</span> com.example.mongo.model.Coffee;</span><br><span class="line"><span class="keyword">import</span> com.example.mongo.repository.CoffeeRepository;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.result.UpdateResult;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.internal.bulk.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.CurrencyUnit;</span><br><span class="line"><span class="keyword">import</span> org.joda.money.Money;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.ClientSessionException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.convert.MongoCustomConversions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.config.EnableMongoRepositories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.data.mongodb.core.query.Criteria.where;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.data.mongodb.core.query.Query.query;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableMongoRepositories</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MongoApplication</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">CoffeeRepository coffeeRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(MongoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 spring-boot-autoconfigure -&gt; data -&gt; mongo -&gt; MongoDataAutoConfiguration.class</span></span><br><span class="line"><span class="comment">// 可以看出构造一个 MongoCustomConversions 类型的 bean ，可以替代 MongoDataAutoConfiguration 中的一部分配置。</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MongoCustomConversions <span class="title function_">mongoCustomConversions</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MongoCustomConversions</span>(Arrays.asList(<span class="keyword">new</span> <span class="title class_">MoneyReadConverter</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="type">Coffee</span> <span class="variable">espresso</span> <span class="operator">=</span> Coffee.builder()</span><br><span class="line">.name(<span class="string">&quot;espresso&quot;</span>)</span><br><span class="line">.price(Money.of(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), <span class="number">20.0</span>))</span><br><span class="line">.createTime(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">.updateTime(<span class="keyword">new</span> <span class="title class_">Date</span>()).build();</span><br><span class="line"><span class="type">Coffee</span> <span class="variable">latte</span> <span class="operator">=</span> Coffee.builder()</span><br><span class="line">.name(<span class="string">&quot;latte&quot;</span>)</span><br><span class="line">.price(Money.of(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), <span class="number">30.0</span>))</span><br><span class="line">.createTime(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">.updateTime(<span class="keyword">new</span> <span class="title class_">Date</span>()).build();</span><br><span class="line"></span><br><span class="line">coffeeRepository.insert(Arrays.asList(espresso, latte));</span><br><span class="line">coffeeRepository.findAll(Sort.by(<span class="string">&quot;name&quot;</span>)).forEach(c -&gt; log.info(<span class="string">&quot;Saved Coffee &#123;&#125;&quot;</span>, c));</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">latte.setPrice(Money.of(CurrencyUnit.of(<span class="string">&quot;CNY&quot;</span>), <span class="number">35.0</span>));</span><br><span class="line">latte.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">coffeeRepository.save(latte);</span><br><span class="line">coffeeRepository.findByName(<span class="string">&quot;latte&quot;</span>).forEach(c -&gt; log.info(<span class="string">&quot;Coffee &#123;&#125;&quot;</span>, c));</span><br><span class="line">coffeeRepository.deleteAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第二章-JDBC必知必会&quot;&gt;&lt;a href=&quot;#第二章-JDBC必知必会&quot; class=&quot;headerlink&quot; title=&quot;第二章 JDBC必知必会&quot;&gt;&lt;/a&gt;第二章 JDBC必知必会&lt;/h2&gt;&lt;h3 id=&quot;1、配置单个数据源&quot;&gt;&lt;a href=&quot;#1、配置</summary>
      
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/04/16/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/04/16/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2022-04-16T15:36:00.379Z</published>
    <updated>2022-04-22T02:17:57.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h2><p>该配置文件说明如何在本地搭建起环境，包括启动 mysql、启动虚拟机、启动 redis。</p><h2 id="一、Mysql启动"><a href="#一、Mysql启动" class="headerlink" title="一、Mysql启动"></a>一、Mysql启动</h2><ul><li>打开navicat 连接 127.0.0.1 即可。 </li><li>可以使用 <a href="http://www.localhost:8080/demo/db/get">http://www.localhost:8080/demo/db/get</a> 测试</li></ul><h2 id="二、Redis-启动"><a href="#二、Redis-启动" class="headerlink" title="二、Redis 启动"></a>二、Redis 启动</h2><p>redis 是使用 multipass 安装的虚拟机需要先启动虚拟机，然后在虚拟机中启动redis。</p><h3 id="1、启动-multipass"><a href="#1、启动-multipass" class="headerlink" title="1、启动 multipass"></a>1、启动 multipass</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipass info -all</span><br><span class="line">multipass shell XXX(host)</span><br></pre></td></tr></table></figure><p>参考链接：<a href="http://www.manongjc.com/detail/21-gtzvxvzjtoaxswf.html">http://www.manongjc.com/detail/21-gtzvxvzjtoaxswf.html</a></p><h3 id="2、启动-redis"><a href="#2、启动-redis" class="headerlink" title="2、启动 redis"></a>2、启动 redis</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis</span><br><span class="line">redis-server redis.conf</span><br><span class="line">redis-cli</span><br><span class="line">auth 123456</span><br></pre></td></tr></table></figure><p>可以使用 <a href="http://www.localhost:8080/demo/redis/get">http://www.localhost:8080/demo/redis/get</a> 测试</p><h2 id="三、压测"><a href="#三、压测" class="headerlink" title="三、压测"></a>三、压测</h2><h3 id="1-图形化压测"><a href="#1-图形化压测" class="headerlink" title="1. 图形化压测"></a>1. 图形化压测</h3><h3 id="2-命令行压测"><a href="#2-命令行压测" class="headerlink" title="2. 命令行压测"></a>2. 命令行压测</h3><p>首先，需要将jar包启动（参考<code>Spring Boot打jar包</code>）。然后，使用jmeter压测。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter.sh -n -t /Users/jq/Desktop/goods_list.jmx -l result.jtl</span><br></pre></td></tr></table></figure><p>如果OOM，可以使用下面命令设置更大的JVM堆栈内存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JVM_ARGS=&quot;-Xms512m -Xmx5g&quot; jmeter.sh -n -t /Users/jq/Desktop/goods_list.jmx -l result.jtl</span><br></pre></td></tr></table></figure><h2 id="四、Spring-Boot打war包。"><a href="#四、Spring-Boot打war包。" class="headerlink" title="四、Spring Boot打war包。"></a>四、Spring Boot打war包。</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-添加"><a href="#2-添加" class="headerlink" title="2. 添加"></a>2. 添加</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true&lt;/fork</span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-修改"><a href="#3-修改" class="headerlink" title="3. 修改"></a>3. 修改</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.imooc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>miaosha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时，把packaging中的jar修改为war。</p><h3 id="4-修改MainApplication类"><a href="#4-修改MainApplication类" class="headerlink" title="4. 修改MainApplication类"></a>4. 修改MainApplication类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder builder)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(MainApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-brew-安装-tomcat-9（和java8匹配"><a href="#5-brew-安装-tomcat-9（和java8匹配" class="headerlink" title="5. brew 安装 tomcat@9（和java8匹配) \"></a>5. brew 安装 tomcat@9（和java8匹配) \</h3><p>Brew会默认安装在/opt/homebrew/Cellar/目录下。</p><h3 id="6-配置tomcat快速启动"><a href="#6-配置tomcat快速启动" class="headerlink" title="6. 配置tomcat快速启动"></a>6. 配置tomcat快速启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias tomcatstart=/opt/homebrew/Cellar/tomcat@9/9.0.60/libexec/bin/startup.sh</span><br><span class="line">alias tomcatstop=/opt/homebrew/Cellar/tomcat@9/9.0.60/libexec/bin/shutdown.sh</span><br></pre></td></tr></table></figure><h3 id="7-打成-war-包"><a href="#7-打成-war-包" class="headerlink" title="7. 打成 war 包"></a>7. 打成 war 包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>在miaosha/target目录下生成miasma.war包。将miasma.war拷贝到 /opt/homebrew/Cellar/tomcat@9/9.0.60/libexec/webapps 目录下。</p><h3 id="8-tomcatstart-启动tomcat。"><a href="#8-tomcatstart-启动tomcat。" class="headerlink" title="8. tomcatstart 启动tomcat。 \"></a>8. tomcatstart 启动tomcat。 \</h3><p>输入<a href="http://www.localhost:8080测试tomcat是否搭建成功。输入">http://www.localhost:8080测试tomcat是否搭建成功。输入</a> <a href="http://www.localhost:8080/miaosha/login/to_login%EF%BC%8C">http://www.localhost:8080/miaosha/login/to_login，</a> 查看登录界面，但目前不能登录，需要在/opt/homebrew/Cellar/tomcat@9/9.0.60/libexec/webapps/Root 目录下添加一些资源。</p><h2 id="五、Spring-Boot打jar包"><a href="#五、Spring-Boot打jar包" class="headerlink" title="五、Spring Boot打jar包"></a>五、Spring Boot打jar包</h2><h3 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、修改"><a href="#2、修改" class="headerlink" title="2、修改"></a>2、修改</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.imooc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>miaosha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、打成-jar-包"><a href="#3、打成-jar-包" class="headerlink" title="3、打成 jar 包"></a>3、打成 jar 包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>在miaosha/target目录下生成miasma.jar包</p><h3 id="4、运行jar，并输出到nohup文件。"><a href="#4、运行jar，并输出到nohup文件。" class="headerlink" title="4、运行jar，并输出到nohup文件。"></a>4、运行jar，并输出到nohup文件。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar miaosha.jar &amp;</span><br></pre></td></tr></table></figure><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><p>输入 <a href="http://www.localhost:8080/miaosha/login/to_login%EF%BC%8C">http://www.localhost:8080/miaosha/login/to_login，</a> 查看登录界面，并且进行压测。 <br>输入 tail -f nohup.out 可以查看日志的末尾输出。</p><h2 id="五、压测-redis"><a href="#五、压测-redis" class="headerlink" title="五、压测 redis"></a>五、压测 redis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -a 123456 -h 127.0.0.1 -p 6379 -c 100 -n 100000</span><br><span class="line"></span><br><span class="line">redis-benchmark -a 123456 -h 127.0.0.1 -p 6379 -q -d 100</span><br><span class="line"></span><br><span class="line">redis-benchmark -a 123456 -t set,lpush -n 100000 -q</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只测试单条命令</span></span><br><span class="line">redis-benchmark -a 123456 -n 100000 -q script load &quot;redis.call(&#x27;set&#x27;,&#x27;foo&#x27;,&#x27;bar&#x27;)&quot;</span><br></pre></td></tr></table></figure><h2 id="六、页面优化技术"><a href="#六、页面优化技术" class="headerlink" title="六、页面优化技术"></a>六、页面优化技术</h2><ul><li>页面缓存 + URL缓存 + 对象缓存 </li><li>页面静态化（不需要重复下载页面，只需要下载动态的），前后端分离</li><li>静态资源优化</li><li>CDN优化</li></ul><h3 id="1、页面缓存"><a href="#1、页面缓存" class="headerlink" title="1、页面缓存"></a>1、页面缓存</h3><p>将 goods_list 页面的信息写入 redis，设置了60s的缓存时间。可以下命令测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keys GoodsKey:gl</span><br><span class="line">get GoodsKey:gl</span><br></pre></td></tr></table></figure><h3 id="2、URL-缓存"><a href="#2、URL-缓存" class="headerlink" title="2、URL 缓存"></a>2、URL 缓存</h3><p>和页面缓存大致一样，给 goods_detail 页面添加缓存，不同于 goods_list 页面的是 goods_detail 页面需要加用户的标号：”1”（<a href="http://www.localhost:8080/goods/to_detail/1%EF%BC%89%E3%80%82">http://www.localhost:8080/goods/to_detail/1）。</a></p><h3 id="3、对象缓存"><a href="#3、对象缓存" class="headerlink" title="3、对象缓存"></a>3、对象缓存</h3><p>此处的对象指的是用户对象，通过用户id将用户的信息写入缓存。</p><p>MiaoshaUserService 类中的 updatePassword 方法，如何更新数据库密码。</p><h3 id="4、页面静态化"><a href="#4、页面静态化" class="headerlink" title="4、页面静态化"></a>4、页面静态化</h3><p>将数据存在浏览器中，主要技术有：AngularJS、Vue.js等<br>此处使用简单的。</p><p>服务端不直接返回html，只返回页面上动态的数据。在前端html页面中接受这些动态的数值即可。</p><h4 id="思考：如何验证客户端加载了浏览器的本地缓存而不是服务端的数据？"><a href="#思考：如何验证客户端加载了浏览器的本地缓存而不是服务端的数据？" class="headerlink" title="思考：如何验证客户端加载了浏览器的本地缓存而不是服务端的数据？\"></a>思考：如何验证客户端加载了浏览器的本地缓存而不是服务端的数据？\</h4><p>304状态码表示服务端数据未改变，可直接使用客户端未过期的缓存。304状态码返回时不包含任何响应的主体部分。<br>请求首部包含<code>If-Modified-Since: Mon, 11 Apr 2022 10:07:49 GMT</code>，服务端会和资源的最近更新时间比较，确定是不是需要返回资源。不需要则返回304状态码，具体如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 304</span><br><span class="line">Last-Modified: Mon, 11 Apr 2022 10:07:49 GMT</span><br><span class="line">Date: Mon, 11 Apr 2022 10:10:19 GMT</span><br></pre></td></tr></table></figure><h4 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h4><p>上面虽然没有直接下载服务端的数据，但还是请求了一次服务端。通过在静态资源中添加设置静态资源的有效时间，不访问服务器，直接使用客户端的缓存。\</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>查看网页请求，发现响应如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Last-Modified: Mon, 11 Apr 2022 10:07:49 GMT</span><br><span class="line">Content-Length: 4818</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Cache-Control: max-age=3600</span><br><span class="line">Date: Mon, 11 Apr 2022 10:43:17 GMT</span><br></pre></td></tr></table></figure><p><code>Cache-Control: max-age=3600</code>字段表示该资源可以在3600ms内复用。</p><h2 id="问题1：库存会被减成负值"><a href="#问题1：库存会被减成负值" class="headerlink" title="问题1：库存会被减成负值"></a>问题1：库存会被减成负值</h2><h4 id="原因：两个人同时减库存时，调用的sql语句如下："><a href="#原因：两个人同时减库存时，调用的sql语句如下：" class="headerlink" title="原因：两个人同时减库存时，调用的sql语句如下："></a>原因：两个人同时减库存时，调用的sql语句如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update miaosha_goods set stock_count = stock_count - 1 where goods_id = #&#123;goodsId&#125;”)</span></span><br></pre></td></tr></table></figure><p>当只有一个库存时会降为-1，此时可以在sql中加库存大于0的判断如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update miaosha_goods set stock_count = stock_count - 1 where goods_id = #&#123;goodsId&#125; and stock_count &gt; 0”)</span>`）</span><br></pre></td></tr></table></figure><h2 id="问题2：一个用户购买了两个同一个商品。"><a href="#问题2：一个用户购买了两个同一个商品。" class="headerlink" title="问题2：一个用户购买了两个同一个商品。"></a>问题2：一个用户购买了两个同一个商品。</h2><h4 id="原因：库存为10，同一个用户同时发出两个请求，同时进入了判断库存等方法，导致一个用户买到两个商品。"><a href="#原因：库存为10，同一个用户同时发出两个请求，同时进入了判断库存等方法，导致一个用户买到两个商品。" class="headerlink" title="原因：库存为10，同一个用户同时发出两个请求，同时进入了判断库存等方法，导致一个用户买到两个商品。"></a>原因：库存为10，同一个用户同时发出两个请求，同时进入了判断库存等方法，导致一个用户买到两个商品。</h4><p>解决思路：购买流程是：减库存 -&gt; 下订单，下订单的时候有个订单表，有用户id和商品id，此处在订单表中给这两个字段建立联合唯一索引。这样创建订单时，如此该用户存在一个订单，再下另一个订单时就会出现重复。注意：在创建订单的函数前加<code>@Transactional</code>。<br>如果只给用户id建立唯一索引可以不？不行，允许用户秒杀其他商品。</p><h3 id="5、静态资源优化"><a href="#5、静态资源优化" class="headerlink" title="5、静态资源优化"></a>5、静态资源优化</h3><ol><li>JS/CSS 压缩，减少流浪；</li><li>多个 JS/CSS 组合</li><li>Tengine 在nginx基础上开发的<br>CDN:内容分发网络。 </li></ol><h2 id="七、秒杀接口优化"><a href="#七、秒杀接口优化" class="headerlink" title="七、秒杀接口优化"></a>七、秒杀接口优化</h2><h3 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h3><ul><li>把秒杀商品信息加载到redis，减少mysql的访问。</li><li>内存标记，减少一次redis查商品库存的访问：使用map（goodsId -&gt; boolean）， false表示还有库存，true表示没有库存，则秒杀结束。接下来的关于goodsId的请求不在访问redis，直接返回。</li><li>通过在redis中预减库存，当库存不足，直接返回，不需要进一步查询Redis中的订单信息，以判断是否秒杀成功。减少了redis的访问。</li><li>使用rabbitmq实现异步下单，达到削峰的作用。<h3 id="秒杀流程："><a href="#秒杀流程：" class="headerlink" title="秒杀流程："></a>秒杀流程：</h3></li><li>系统初始化，把商品库存数量加载到redis。</li><li>收到请求，内存标记，减少redis访问：</li><li>redis预减库存，如果库存不足，设置该goodsId的map值为true，然后直接返回。</li><li>请求入队，立即返回排队中。</li><li>请求出队，生成订单，减少库存。</li><li>客户端轮询，是否秒杀成功。</li></ul><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><p>安装 RabbitMQ。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install erlang</span><br><span class="line">erl</span><br></pre></td></tr></table></figure><p>以上命令能正常输出说明<code>erlang</code>安装成功。接下来安装、启动并验证<code>rabbitmq</code>是否在监听5672端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install rabbitmq-server</span><br><span class="line">sudo rabbitmq-server</span><br><span class="line">netstat -nap | grep 5672</span><br></pre></td></tr></table></figure><p>关闭<code>rabbitmq</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl stop</span><br></pre></td></tr></table></figure><h4 id="设置一个-rabbitmq-的用户名和密码，默认存在一个用户-guest，密码为-guest。"><a href="#设置一个-rabbitmq-的用户名和密码，默认存在一个用户-guest，密码为-guest。" class="headerlink" title="设置一个 rabbitmq 的用户名和密码，默认存在一个用户 guest，密码为 guest。"></a>设置一个 rabbitmq 的用户名和密码，默认存在一个用户 guest，密码为 guest。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user YOUR_USERNAME YOUR_PASSWORD</span><br><span class="line">rabbitmqctl set_user_tags YOUR_USERNAME administrator</span><br><span class="line">rabbitmqctl set_permissions -p / YOUR_USERNAME &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul><li>Nginx水平扩展。</li><li>分库分表</li></ul><h2 id="八、安全优化"><a href="#八、安全优化" class="headerlink" title="八、安全优化"></a>八、安全优化</h2><ul><li>秒杀接口地址隐藏</li><li>数学公式验证码（可以削峰）</li><li>接口限流放刷</li></ul><h3 id="1、秒杀接口地址隐藏"><a href="#1、秒杀接口地址隐藏" class="headerlink" title="1、秒杀接口地址隐藏"></a>1、秒杀接口地址隐藏</h3><p>思路：秒杀开始之前，先去请求接口获取秒杀地址。</p><ul><li>接口改造，带上PathVariable参数。</li><li>添加生成地址的接口。</li><li>秒杀收到请求，先验证PathVariable</li></ul><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>秒杀开始，用户点击秒杀按钮时，在后端使用uuid+DM5生成一个str，并且以<code>用户id_商品id</code>为键，<code>str</code>为值存入redis。前端通过接口请求到这个str，拼接到路径中请求后端。后端取出这个str后和自己生成的oldStr对比（redis中的str），如果一致，则进入秒杀流程。</p><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>有人先请求前端的接口得到str，然后去访问秒杀接口，可行吗？？？</p><h3 id="2、数学公式验证码"><a href="#2、数学公式验证码" class="headerlink" title="2、数学公式验证码"></a>2、数学公式验证码</h3><ul><li>添加生成验证码的接口。</li><li>在获取秒杀路径的时候，验证验证码。</li><li>ScriptEngine使用。</li></ul><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><p>秒杀开始时，前端请求后端生成验证码，然后将生成的验证码信息以<code>vc_用户id_秒杀商品id -&gt; 验证码结果</code>的形式存储在redis中，同时将验证码发给前端。前端展示给用户，用户输入结果，点击秒杀按钮。前端发送请求给后端（同时包含秒杀地址参数），后端先从redis中取出验证码结果验证是否正确。正确则开始在redis中生成path，并进行下一步操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>秒杀系统设计 负责项目的设计和开发 2022.4 - 2022.5</p><p>• 项目介绍：为了解决秒杀商品时存在高并发的问题，本项目基于SpringBoot开发秒杀系统。本人主要负责登录模块、商品列表模块、商品详情模板、订单详情模块、秒杀接口优化部分、安全模块。</p><p>• 个人收获：对于基于SpringBoot项目的开发有了更加完整和深刻的认识。</p><p>• 相关技术：SpringBoot、MySql、mybatis、Redis、RabbitMQ、Thymeleaf、jmeter</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;configuration&quot;&gt;&lt;a href=&quot;#configuration&quot; class=&quot;headerlink&quot; title=&quot;configuration&quot;&gt;&lt;/a&gt;configuration&lt;/h2&gt;&lt;p&gt;该配置文件说明如何在本地搭建起环境，包括启动 mys</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初识ThreadLocal</title>
    <link href="http://example.com/2022/04/16/%E5%88%9D%E8%AF%86ThreadLocal/"/>
    <id>http://example.com/2022/04/16/%E5%88%9D%E8%AF%86ThreadLocal/</id>
    <published>2022-04-16T04:22:26.000Z</published>
    <updated>2022-04-26T14:50:45.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、ThreadLocal-使用实例"><a href="#1、ThreadLocal-使用实例" class="headerlink" title="1、ThreadLocal 使用实例"></a>1、ThreadLocal 使用实例</h1><p>来源：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306581251653666">廖雪峰Java教程</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        String[] users = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Tim&quot;</span>, <span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Bush&quot;</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (String user : users) &#123;</span><br><span class="line">            es.submit(<span class="keyword">new</span> <span class="title class_">Task</span>(user));</span><br><span class="line">        &#125;</span><br><span class="line">        es.awaitTermination(<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserContext</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; userThreadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserContext</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        userThreadLocal.set(name);</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s] init user %s...\n&quot;</span>, Thread.currentThread().getName(), UserContext.getCurrentUser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCurrentUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userThreadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s] cleanup for user %s...\n&quot;</span>, Thread.currentThread().getName(),</span><br><span class="line">                UserContext.getCurrentUser());</span><br><span class="line">        userThreadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">UserContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserContext</span>(<span class="built_in">this</span>.username)) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Task1</span>().process();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Task2</span>().process();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Task3</span>().process();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s] check user %s...\n&quot;</span>, Thread.currentThread().getName(), UserContext.getCurrentUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s] %s registered ok.\n&quot;</span>, Thread.currentThread().getName(), UserContext.getCurrentUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s] work of %s has done.\n&quot;</span>, Thread.currentThread().getName(),</span><br><span class="line">                UserContext.getCurrentUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2、ThreadLocal-结构"><a href="#2、ThreadLocal-结构" class="headerlink" title="2、ThreadLocal 结构"></a>2、ThreadLocal 结构</h1><p><code>ThreadLocal</code>类里边定义了一个<code>ThreadLocalMap</code>静态内部类，<code>ThreadLocalMap</code>里边又有一个<code>static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>{}。除此之外，<code>ThreadLocalMap</code>中定义了<code>private Entry[] table。</code>因此，<code>ThreadLocal</code>的结构如下：<br><img src="/2022/04/16/%E5%88%9D%E8%AF%86ThreadLocal/ThreadLocal.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ThreadLocalMap <span class="title function_">createInheritedMap</span><span class="params">(ThreadLocalMap parentMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadLocalMap</span>(parentMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalMap</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="built_in">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The initial capacity -- MUST be a power of two.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The table, resized as necessary.</span></span><br><span class="line"><span class="comment">         * table.length MUST always be a power of two.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The number of entries in the table.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The next size value at which to resize.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">        ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">            table = <span class="keyword">new</span> <span class="title class_">Entry</span>[INITIAL_CAPACITY];</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">            table[i] = <span class="keyword">new</span> <span class="title class_">Entry</span>(firstKey, firstValue);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            setThreshold(INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存泄露问题"><a href="#内存泄露问题" class="headerlink" title="内存泄露问题"></a>内存泄露问题</h3><p><code>ThreadLocalMap</code>中的key是一个弱引用，垃圾回收时就会被回收。如果<code>ThreadLocalMap</code>对应的线程依旧存活，那么value就依旧具有强引用而不会被回收，从而导致内存泄漏。解决内存泄漏的方法：直接调用remove()方法 (try{}finally{})，将value也置为 NULL。</p><h1 id="3、结合Thread理解ThreadLoal"><a href="#3、结合Thread理解ThreadLoal" class="headerlink" title="3、结合Thread理解ThreadLoal"></a>3、结合<code>Thread</code>理解<code>ThreadLoal</code></h1><p><code>Thread</code>类中包含一个<code>ThreadLocal.ThreadLocalMap</code>类型的成员变量<code>threadLocals</code>，因此每一个<code>Thread</code>都有一个<code>ThreadLocalMap</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment">     * by the ThreadLocal class. */</span></span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">threadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ThreadLoal</code>set或get时，会先获取当前的<code>thread</code>，其实操作的就是<code>thread</code>的<code>threadLocals</code>,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">            map.set(<span class="built_in">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在set方法中，最终是<code>map.set(this, value)</code>，这儿的this是Thread的一个实例,因此map结构是 (线程 –&gt; Object)。</p><h2 id="思考：Entry类数组的作用？"><a href="#思考：Entry类数组的作用？" class="headerlink" title="思考：Entry类数组的作用？"></a>思考：<code>Entry</code>类数组的作用？</h2><h1 id="3、ThreadLocal-使用场景"><a href="#3、ThreadLocal-使用场景" class="headerlink" title="3、ThreadLocal 使用场景"></a>3、ThreadLocal 使用场景</h1><ul><li>ThreadLocal 相当于是线程的本地缓存，因此对可以存储一些属于该线程的数据，防止竞争。</li><li>对于当前线程多次使用的的数据可以使用 ThreadLocal 存储，通过 get 方法就可以获得。比如，当前用户的 session 会在程序中多次使用，定义一个 ThreadLocal 存储，每次使用时 get 即可。</li></ul><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>1、<a href="https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/concurrent/threadlocal.md">Guide ThreadLocal 关键字解析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、ThreadLocal-使用实例&quot;&gt;&lt;a href=&quot;#1、ThreadLocal-使用实例&quot; class=&quot;headerlink&quot; title=&quot;1、ThreadLocal 使用实例&quot;&gt;&lt;/a&gt;1、ThreadLocal 使用实例&lt;/h1&gt;&lt;p&gt;来源：&lt;a </summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC自定义参数解析器</title>
    <link href="http://example.com/2022/04/15/SpringMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
    <id>http://example.com/2022/04/15/SpringMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8/</id>
    <published>2022-04-15T08:05:04.000Z</published>
    <updated>2022-04-15T13:34:38.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、实现参数解析器的接口HandlerMethodArgumentResolver"><a href="#1、实现参数解析器的接口HandlerMethodArgumentResolver" class="headerlink" title="1、实现参数解析器的接口HandlerMethodArgumentResolver"></a>1、实现参数解析器的接口<code>HandlerMethodArgumentResolver</code></h1><p><code>HandlerMethodArgumentResolver</code>接口包含两个方法<code>supportsParameter</code>和<code>resolveArgument</code>。</p><ul><li>supportsParameter方法返回 boolean 值，表示是否启用该解析器，true 表示启用，false 表示不启用；</li><li>resolveArgument 方法表示方法参数的解析过程，就是你把 HTTP 的请求参数转换为方法参数的过程，返回 Object 对象，即参数的转换结果。</li></ul><p>源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter var1)</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter var1, ModelAndViewContainer var2, NativeWebRequest var3, WebDataBinderFactory var4)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、自定义一个参数解析器"><a href="#2、自定义一个参数解析器" class="headerlink" title="2、自定义一个参数解析器"></a>2、自定义一个参数解析器</h1><ul><li>定义一个方法注解</li><li>实现<code>HandlerMethodArgumentResolver</code>接口。</li><li>注册参数解析器</li><li>使用参数解析器</li></ul><h2 id="2-1-定义一个方法注解"><a href="#2-1-定义一个方法注解" class="headerlink" title="2.1 定义一个方法注解"></a>2.1 定义一个方法注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ParamModel &#123;</span><br><span class="line">    <span class="comment">// 可以定义需要带的参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-实现HandlerMethodArgumentResolver接口。"><a href="#2-2-实现HandlerMethodArgumentResolver接口。" class="headerlink" title="2.2 实现HandlerMethodArgumentResolver接口。"></a>2.2 实现<code>HandlerMethodArgumentResolver</code>接口。</h2><p>在<code>HandlerMethodArgumentResolver</code>接口中实现具体的参数解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserArgumentResolvers</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">        <span class="comment">//带有注解就解析，即调用下面的 resolveArgument 方法。</span></span><br><span class="line">        <span class="keyword">return</span> methodParameter.hasParameterAnnotation(ParamModel.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer,</span></span><br><span class="line"><span class="params">                                  NativeWebRequest webRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">       <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从request和request中解析出对应的Object。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-注册参数解析器"><a href="#2-3-注册参数解析器" class="headerlink" title="2.3 注册参数解析器"></a>2.3 注册参数解析器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserArgumentResolvers userArgumentResolver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class="line">        argumentResolvers.add(userArgumentResolver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-使用参数解析器"><a href="#2-4-使用参数解析器" class="headerlink" title="2.4 使用参数解析器"></a>2.4 使用参数解析器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMiaoshaPath</span><span class="params">(<span class="meta">@ParamModel</span> <span class="type">int</span> verifyCode)</span> &#123; <span class="comment">// 参数解析的结果会赋值给verifyCode。</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、实现参数解析器的接口HandlerMethodArgumentResolver&quot;&gt;&lt;a href=&quot;#1、实现参数解析器的接口HandlerMethodArgumentResolver&quot; class=&quot;headerlink&quot; title=&quot;1、实现参数解析器的</summary>
      
    
    
    
    <category term="SpringMVC" scheme="http://example.com/categories/SpringMVC/"/>
    
    
    <category term="java、SpringMVC、参数解析器" scheme="http://example.com/tags/java%E3%80%81SpringMVC%E3%80%81%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC实现拦截器</title>
    <link href="http://example.com/2022/04/15/SpringMVC%E5%AE%9E%E7%8E%B0%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://example.com/2022/04/15/SpringMVC%E5%AE%9E%E7%8E%B0%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2022-04-15T08:01:11.000Z</published>
    <updated>2022-04-15T13:35:21.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、功能需求"><a href="#1、功能需求" class="headerlink" title="1、功能需求"></a>1、功能需求</h1><p>在秒杀商品时，需要使用秒杀接口防刷保护程序，可以定义一个拦截器实现。具体使用如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AccessLimit(seconds = 1, maxCount = 100, needLogin = true)</span></span><br></pre></td></tr></table></figure><p>这个拦截器需要当前用户登录，且1s内限制最大请求次数为100。</p><h1 id="2、拦截器的主要类HandlerInterceptorAdapter"><a href="#2、拦截器的主要类HandlerInterceptorAdapter" class="headerlink" title="2、拦截器的主要类HandlerInterceptorAdapter"></a>2、拦截器的主要类<code>HandlerInterceptorAdapter</code></h1><p><code>HandlerInterceptorAdapter</code>提供的方法如下：</p><ul><li><code>preHandle</code>:方法执行前调用拦截器，返回true，则接续执行，否则不会执行方法。</li><li><code>postHandle</code>:在方法执行后调用。</li><li><code>afterCompletion</code><br>源代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3、实现拦截器"><a href="#3、实现拦截器" class="headerlink" title="3、实现拦截器"></a>3、实现拦截器</h1><ul><li>自定义 @AccessLimit 参数解析器。</li><li>重写<code>HandlerInterceptorAdapter</code>类的<code>preHandle</code>方法</li><li>注册拦截器</li><li>使用拦截器</li></ul><h2 id="3-1-自定义-AccessLimit-注解。"><a href="#3-1-自定义-AccessLimit-注解。" class="headerlink" title="3.1 自定义 @AccessLimit 注解。"></a>3.1 自定义 @AccessLimit 注解。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 定义一个注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AccessLimit &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">seconds</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">maxCount</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">needLogin</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-重写preHandle方法"><a href="#3-2-重写preHandle方法" class="headerlink" title="3.2 重写preHandle方法"></a>3.2 重写<code>preHandle</code>方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  满足拦截条件 return false;</span></span><br><span class="line"><span class="comment">*  不满足拦截条件 return true;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod)&#123;</span><br><span class="line">            <span class="type">MiaoshaUser</span> <span class="variable">user</span> <span class="operator">=</span> getUser(request, response);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存储user</span></span><br><span class="line">            UserContext.setUser(user); <span class="comment">// 当前线程就可以取用。</span></span><br><span class="line"></span><br><span class="line">            <span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">            <span class="type">AccessLimit</span> <span class="variable">accessLimit</span> <span class="operator">=</span> hm.getMethodAnnotation(AccessLimit.class);    <span class="comment">// 获取注解</span></span><br><span class="line">            <span class="keyword">if</span> (accessLimit == <span class="literal">null</span>) &#123;    <span class="comment">// 如果没有限制</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">seconds</span> <span class="operator">=</span> accessLimit.seconds();</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> accessLimit.maxCount();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">needLogin</span> <span class="operator">=</span> accessLimit.needLogin();</span><br><span class="line">            <span class="comment">// 具体的拦截逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-注册拦截器"><a href="#3-3-注册拦截器" class="headerlink" title="3.3 注册拦截器"></a>3.3 注册拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccessInterceptor accessInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class="line">        argumentResolvers.add(userArgumentResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-使用拦截器"><a href="#3-4-使用拦截器" class="headerlink" title="3.4 使用拦截器"></a>3.4 使用拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AccessLimit(seconds = 1, maxCount = 100, needLogin = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、功能需求&quot;&gt;&lt;a href=&quot;#1、功能需求&quot; class=&quot;headerlink&quot; title=&quot;1、功能需求&quot;&gt;&lt;/a&gt;1、功能需求&lt;/h1&gt;&lt;p&gt;在秒杀商品时，需要使用秒杀接口防刷保护程序，可以定义一个拦截器实现。具体使用如下所示：&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    <category term="SpringMVC" scheme="http://example.com/categories/SpringMVC/"/>
    
    
    <category term="java，SpringMVC，拦截器" scheme="http://example.com/tags/java%EF%BC%8CSpringMVC%EF%BC%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>java杂项</title>
    <link href="http://example.com/2022/04/15/java%E6%9D%82%E9%A1%B9/"/>
    <id>http://example.com/2022/04/15/java%E6%9D%82%E9%A1%B9/</id>
    <published>2022-04-15T07:02:11.000Z</published>
    <updated>2022-04-28T14:48:30.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ThreadLcoal-的用法"><a href="#ThreadLcoal-的用法" class="headerlink" title="ThreadLcoal 的用法"></a>ThreadLcoal 的用法</h2><p>在秒杀功能中，定义一个<code>static</code>的<code>ThreadLcoal</code>存储<code>MiaoshaUser</code>。当用户点击秒杀按钮时将其存储在<code>ThreadLocal</code>中，该线程以后使用时就可以直接get。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;MiaoshaUser&gt; userHolder = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>如果不这样做，需要每次从请求中解析<code>MiaoshaUser</code>对象,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserArgumentResolvers</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MiaoshaUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">        <span class="comment">// 当为 MiaoshaUser 类型时就执行参数解析，即调用下面的 resolveArgument 方法。</span></span><br><span class="line">        Class&lt;?&gt; clazz = parameter.getParameterType();</span><br><span class="line">        <span class="type">return</span> <span class="variable">clazz</span> <span class="operator">=</span>= MiaoshaUser.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer,</span></span><br><span class="line"><span class="params">                                  NativeWebRequest webRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">       <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">paramToken</span> <span class="operator">=</span> request.getParameter(MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class="line">       <span class="type">String</span> <span class="variable">cookieToken</span> <span class="operator">=</span> getCookieValue(request, MiaoshaUserService.COOKI_NAME_TOKEN);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isEmpty(cookieToken) &amp;&amp; StringUtils.isEmpty(paramToken))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> StringUtils.isEmpty(paramToken) ? cookieToken : paramToken;</span><br><span class="line">       <span class="keyword">return</span> userService.getByToken(response,token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String <span class="title function_">getCookieValue</span><span class="params">(HttpServletRequest request, String cookieName)</span> &#123;</span><br><span class="line">       Cookie[] cookies = request.getCookies();</span><br><span class="line">       <span class="keyword">if</span> (cookies == <span class="literal">null</span> || cookies.length &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">           <span class="keyword">if</span> (cookie.getName().equals(cookieName))&#123;</span><br><span class="line">               <span class="keyword">return</span> cookie.getValue();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ThreadLcoal-的用法&quot;&gt;&lt;a href=&quot;#ThreadLcoal-的用法&quot; class=&quot;headerlink&quot; title=&quot;ThreadLcoal 的用法&quot;&gt;&lt;/a&gt;ThreadLcoal 的用法&lt;/h2&gt;&lt;p&gt;在秒杀功能中，定义一个&lt;code&gt;s</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="杂项" scheme="http://example.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>杂项</title>
    <link href="http://example.com/2022/04/08/%E6%9D%82%E9%A1%B9/"/>
    <id>http://example.com/2022/04/08/%E6%9D%82%E9%A1%B9/</id>
    <published>2022-04-08T03:37:43.000Z</published>
    <updated>2022-04-16T02:12:18.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p>export 表示将该路径添加到环境变量中，打开 vim .zshrc ，添加jmeter的快速启动路径</p><blockquote><p>export JMETER_HOME=/usr/local/apache-jmeter-5.4.3<br>export PATH=$JAVA_HOME/bin:$PATH:.:$JMETER_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JMETER_HOME/lib/ext/ApacheJMeter_core.jar:$JMETER_HOME/lib/jorphan.jar:$JMETER_HOME/lib/logkit-2.0.jar</p></blockquote><p>source .zshrc 使.zshrc生效。<br>使用 export -p 可以查看当前的环境中的路径。</p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>alias 为指定路径起别名。</p><blockquote><p>export PATH=/usr/local/mysql/bin:$PATH<br>#快速启动、结束MySQL服务, 可以使用alias命令<br>alias mysqlstart=’sudo /usr/local/mysql/support-files/mysql.server start’<br>alias mysqlstop=’sudo /usr/local/mysql/support-files/mysql.server stop’</p></blockquote><hr><h2 id="macOS目录的作用"><a href="#macOS目录的作用" class="headerlink" title="macOS目录的作用"></a>macOS目录的作用</h2><h3 id="系统硬件相关"><a href="#系统硬件相关" class="headerlink" title="系统硬件相关"></a>系统硬件相关</h3><p>/cores 内核转储文件存放目录。当一个进程崩溃时，如果系统允许则会产生转储文件。<br>/dev 设备文件存放目录，如何代表硬盘的/dev/disk0。<br>/Network 网络节点存放目录；<br>/Volumes 文件系统挂载点存放目录。</p><h3 id="系统配置相关"><a href="#系统配置相关" class="headerlink" title="系统配置相关"></a>系统配置相关</h3><p>/etc. 标准unix系统配置文件存放目录，如用户密码文件/etc/passwd。此目录实际为指向/private/etc的链接。</p><h3 id="系统程序相关"><a href="#系统程序相关" class="headerlink" title="系统程序相关"></a>系统程序相关</h3><p>/Applications 应用程序目录，默认所有的GUI应用程序都安装在这里；<br>/Library 系统的数据文件、帮助文件、文档等等；<br>/System 只包含一个名为Library的目录，这个子目录中存放了系统的绝大部分组件，如各种framework，以及内核模块，字体文件等等。</p><h3 id="系统命令相关"><a href="#系统命令相关" class="headerlink" title="系统命令相关"></a>系统命令相关</h3><p>/bin 传统unix命令的存放目录，如ls，rm，mv等。<br>/sbin 传统unix管理类命令存放目录，如fdisk，ifconfig等等。</p><h3 id="用户信息相关"><a href="#用户信息相关" class="headerlink" title="用户信息相关"></a>用户信息相关</h3><p>/Users 存放用户的个人资料和配置。每个用户有自己的单独目录。</p><h3 id="用户经常使用"><a href="#用户经常使用" class="headerlink" title="用户经常使用"></a>用户经常使用</h3><p>/usr 第三方程序安装目录。<br>/usr/bin, /usr/sbin, /usr/lib，其中/usr/lib目录中存放了共享库（动态链接库）。<br>/var 存放经常变化的文件，如日志文件。此目录实际为指向/private/var的链接。</p><p>/opt/homebrew brew安装的程序一般放这儿。</p><p>/private 里面的子目录存放了/tmp, /var, /etc等链接目录的目标目录。<br>/tmp 临时文件存放目录，其权限为所有人任意读写。此目录实际为指向/private/tmp的链接。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>/installer.failurerequests 可能是用来记录发生crash时的日志。</p><hr><h2 id="linux-命令拾遗"><a href="#linux-命令拾遗" class="headerlink" title="linux 命令拾遗"></a>linux 命令拾遗</h2><h3 id="lsof（list-open-files）"><a href="#lsof（list-open-files）" class="headerlink" title="lsof（list open files）"></a>lsof（list open files）</h3><p>lsof 列出当前系统打开文件的工具。lsof -i :8080 可以查看当前占用8080端口的进程。</p><h3 id="ls（list）"><a href="#ls（list）" class="headerlink" title="ls（list）"></a>ls（list）</h3><p>ls默认情况下用来打印出当前目录的列表。</p><hr><h2 id="git流程"><a href="#git流程" class="headerlink" title="git流程"></a>git流程</h2><p>将写了一半的项目git到空github上。</p><ol><li>github上创建同名仓库</li><li>git clone到本地</li><li>将隐藏的.git文件复制到已经写了一半的project中</li><li>git add .</li><li>git status</li><li>git commit -m “提交说明”</li><li>git push</li></ol><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置环境变量&quot;&gt;&lt;a href=&quot;#配置环境变量&quot; class=&quot;headerlink&quot; title=&quot;配置环境变量&quot;&gt;&lt;/a&gt;配置环境变量&lt;/h2&gt;&lt;h3 id=&quot;export&quot;&gt;&lt;a href=&quot;#export&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="杂项" scheme="http://example.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>hexo github配置博客</title>
    <link href="http://example.com/2022/04/06/hexo%20github%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2022/04/06/hexo%20github%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-04-06T03:44:59.000Z</published>
    <updated>2022-04-17T02:40:35.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、-配置环境流程"><a href="#1、-配置环境流程" class="headerlink" title="1、 配置环境流程"></a>1、 配置环境流程</h2><h3 id="1-1-安装node-js"><a href="#1-1-安装node-js" class="headerlink" title="1.1 安装node.js"></a>1.1 安装node.js</h3><p>官网下载node.js<br>node -v<br>nmp -v</p><h3 id="1-2-创建blog目录"><a href="#1-2-创建blog目录" class="headerlink" title="1.2 创建blog目录"></a>1.2 创建blog目录</h3><p>mkdir /Users/jq/blog</p><h3 id="1-3-安装hexo"><a href="#1-3-安装hexo" class="headerlink" title="1.3 安装hexo"></a>1.3 安装hexo</h3><p>nmp install hexo -g hexo-cli<br>hexo -v</p><h3 id="1-4-VPN设置"><a href="#1-4-VPN设置" class="headerlink" title="1.4 VPN设置"></a>1.4 VPN设置</h3><p>如果设置了VPN，需要设置环境变量；<br>vim ./~zshrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br><span class="line"></span><br><span class="line">source ./~zshrc</span><br></pre></td></tr></table></figure><h3 id="1-5-初始化hexo"><a href="#1-5-初始化hexo" class="headerlink" title="1.5 初始化hexo"></a>1.5 初始化hexo</h3><p>sudo su<br>sudo hexo init</p><h2 id="2、写一个博客流程"><a href="#2、写一个博客流程" class="headerlink" title="2、写一个博客流程"></a>2、写一个博客流程</h2><h3 id="2-1-开始hexo"><a href="#2-1-开始hexo" class="headerlink" title="2.1 开始hexo"></a>2.1 开始hexo</h3><p>hexo s</p><h3 id="2-2-创建一个新博客"><a href="#2-2-创建一个新博客" class="headerlink" title="2.2 创建一个新博客"></a>2.2 创建一个新博客</h3><p>hexo n “XXXX”</p><p>使用vsconde等编写内容。</p><h3 id="2-3-清理"><a href="#2-3-清理" class="headerlink" title="2.3 清理"></a>2.3 清理</h3><p>hexo clean</p><h3 id="2-4-生成博客"><a href="#2-4-生成博客" class="headerlink" title="2.4 生成博客"></a>2.4 生成博客</h3><p>hexo g</p><h3 id="2-5-浏览刚才写的博客"><a href="#2-5-浏览刚才写的博客" class="headerlink" title="2.5 浏览刚才写的博客"></a>2.5 浏览刚才写的博客</h3><p>hexo s</p><h2 id="3、配置github"><a href="#3、配置github" class="headerlink" title="3、配置github"></a>3、配置github</h2><h3 id="3-1-在最后添加"><a href="#3-1-在最后添加" class="headerlink" title="3.1 在最后添加"></a>3.1 在最后添加</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:jiaoqiang2014/jiaoqiang2014.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="4、换主题"><a href="#4、换主题" class="headerlink" title="4、换主题"></a>4、换主题</h2><h3 id="4-1-下载主题"><a href="#4-1-下载主题" class="headerlink" title="4.1 下载主题"></a>4.1 下载主题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia</span><br><span class="line">git@github.com:yscoder/hexo-theme-indigo.git</span><br></pre></td></tr></table></figure><h3 id="4-2-修改-config-yml配置"><a href="#4-2-修改-config-yml配置" class="headerlink" title="4.2 修改_config.yml配置"></a>4.2 修改_config.yml配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></table></figure><p>Hexo clean</p><p>Hexo g</p><p>Hero s</p><h2 id="5、代码折叠功能"><a href="#5、代码折叠功能" class="headerlink" title="5、代码折叠功能"></a>5、<a href="https://www.toimc.com/hexo-usage-2/#%E6%B7%BB%E5%8A%A0jquery">代码折叠功能</a></h2><h2 id="6、hexo引用本地图片无法显示问题"><a href="#6、hexo引用本地图片无法显示问题" class="headerlink" title="6、hexo引用本地图片无法显示问题"></a>6、<a href="https://juejin.cn/post/7006594302604214280">hexo引用本地图片无法显示问题</a></h2><p>使用格式为：<code>![图片描述](md文件夹名字/example.jpg)</code></p><h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><p><strong><a href="https://tohugo.com/2021/01/26/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%EF%BC%88%E5%9C%A8Next%E4%B8%BB%E9%A2%98%E4%B8%8B%EF%BC%89/">1、 hexo增加分类、标签</a></strong><br><strong><a href="https://www.fangdongdemao.com/2020/05/23/hexo-Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">2、 hexo主题美化</a></strong><br><strong><a href="https://github.com/Neveryu/Neveryu.github.io/blob/">3 https://github.com/Neveryu/Neveryu.github.io/blob/</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、-配置环境流程&quot;&gt;&lt;a href=&quot;#1、-配置环境流程&quot; class=&quot;headerlink&quot; title=&quot;1、 配置环境流程&quot;&gt;&lt;/a&gt;1、 配置环境流程&lt;/h2&gt;&lt;h3 id=&quot;1-1-安装node-js&quot;&gt;&lt;a href=&quot;#1-1-安装node-j</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
</feed>
